// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

//
//
#pragma once

#include <string>

namespace scene_rdl2 {
namespace fb_util {

//
// -- Generating lookup table for conversion from linear float to gamma 2.2 uchar
//
// This class is designed for generating lookup table for direct conversion from 32bit
// single float (linear space) to 8bit unsigned char with gamma 2.2 conversion.
// Also includes several different test and verify functions.
//
// This class is not used runtime of moonray. But I would like to keep this code inside
// moonray because it's very useful to understand basic idea of direct float to uchar
// lookup table for gamma 2.2 correction. Toshi (Jan/03/2018)
//
// I tested several versions and finally found 15bitLUT version is fastest.
// So I'm currently using 15bitLUT by GammaF2C::g22().
// LUT is generated by GammaF2CLUT::tblGen15bit() and id is computed by GammaF2CLUT::calcTblId3()
// Toshi (Mar/01/2018)
//
class GammaF2CLUT
{
public:
    GammaF2CLUT() { mUni.mI = 0; }

    //------------------------------
    //
    // raw level set/get/show for single float value
    //
    void set(const float f) { mUni.mF = f; }
    void set(const int signBit, const int exponent, const int mantissa) {
        mUni.mI = (((signBit & 0x1) << 31) | ((exponent & 0xff) << 23) | (mantissa & 0x7fffff));        
    }
    
    float getF() const { return mUni.mF; }

    std::string show(const std::string &hd) const;

    //------------------------------
    //
    // some experimental test
    //
    void testReconstructSingleFloat();
    float testGamma22(); // test for reconstruct gamma2.2 from exp and man separately

    //------------------------------
    //
    // generate several different type of tables.
    //
    void tbl1024();
    void tbl2048();
    void id2f_tbl37(const int tblId); // 10bit table
    void id2f_tbl38(const int tblId); // 11bit table
    void id2f_tbl46(const int tblId); // 10bit table
    void id2f_tbl47(const int tblId); // 11bit table
    void id2f_tbl55(const int tblId); // 10bit table
    void id2f_tbl56(const int tblId); // 11bit table
    void id2f_tbl57(const int tblId); // 12bit table : best so far

    //------------------------------
    //
    // table index related test
    //
    void testTblId();
    static unsigned calcTblId(const float f);
    static unsigned calcTblId(const unsigned expMask, const unsigned manMask);
    static unsigned calcTblId2(const unsigned manMaskShifted);
    static unsigned calcTblId3(const unsigned manMaskShifted);

    //------------------------------
    //
    // table generation and verify
    //
    static std::string tblGen();
    bool verifyTbl22();

    static std::string tblGen15bit();

protected:
    union {
        float mF;
        unsigned int mI;
    } mUni;

    std::string showBit(const std::string &hd) const;
    std::string showSignBit() const { return showMask(31, 31, mUni.mI); }
    std::string showExponentBit() const { return showMask(30, 23, mUni.mI); }
    std::string showMantissaBit() const { return showMask(22, 0, mUni.mI); }
    std::string showAllBit() const { return showMask(31, 0, mUni.mI); }
    std::string showMask(const int left, const int right, const unsigned int d) const;

    double calcExponentVal() const;
    double calcMantissaVal() const;
}; // GammaF2CLUT

} // namespace fb_util
} // namespace scene_rdl2

