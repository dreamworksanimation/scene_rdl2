// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file Mat3.isph
/// @brief
/// defines the 3x3 matrix type Mat3 and its methods
/// @details
/// a Mat3 matrix is laid out as<BR>
///   |vx.x vx.y vx.z|<BR>
///   |vy.x vy.y vy.z|<BR>
///   |vz.x vz.y vz.z|<BR>
///
/// The Mat3 class can be used to represent linear transformations.
/// Primarily this means scales and rotations of points, vectors, and normals
/// stored as Vec3.  The matrices are encoded such that when vec3' = vec3 *
/// mat3, vec3' is the transformed version of vec3 - i.e. matrix on the right,
/// vector on the left.  To reduce ambiguity, a set of transform() functions
/// are given that can be used in lieu of the raw "*" operator.

#pragma once

#include "Constants.isph"
#include "Math.isph"
#include "Quaternion.isph"
#include "Vec3.isph"

//--------------------------------------------------------------------------------------------------
// Types
//--------------------------------------------------------------------------------------------------

struct Mat3f
{
    Vec3f vx;
    Vec3f vy;
    Vec3f vz;
};

//--------------------------------------------------------------------------------------------------
// Constructors
//--------------------------------------------------------------------------------------------------

// Mat3f = {vx, vy, vz}
inline uniform Mat3f Mat3f_ctor(const uniform Vec3f vx, const uniform Vec3f vy, const uniform Vec3f vz)
{
    uniform Mat3f result;
    result.vx = vx;
    result.vy = vy;
    result.vz = vz;
    return result;
}

// Mat3f = {vx, vy, vz}
inline varying Mat3f Mat3f_ctor(const varying Vec3f vx, const varying Vec3f vy, const varying Vec3f vz)
{
    varying Mat3f result;
    result.vx = vx;
    result.vy = vy;
    result.vz = vz;
    return result;
}

// Mat3f = {m00, ..., m22}
inline uniform Mat3f Mat3f_ctor(const uniform float m00, const uniform float m01, const uniform float m02,
                                const uniform float m10, const uniform float m11, const uniform float m12,
                                const uniform float m20, const uniform float m21, const uniform float m22)
{
    return Mat3f_ctor(Vec3f_ctor(m00, m01, m02),
                      Vec3f_ctor(m10, m11, m12),
                      Vec3f_ctor(m20, m21, m22));
}

// Mat3f = {m00, ..., m22}
inline varying Mat3f Mat3f_ctor(const varying float m00, const varying float m01, const varying float m02,
                                const varying float m10, const varying float m11, const varying float m12,
                                const varying float m20, const varying float m21, const varying float m22)
{
    return Mat3f_ctor(Vec3f_ctor(m00, m01, m02),
                      Vec3f_ctor(m10, m11, m12),
                      Vec3f_ctor(m20, m21, m22));
}

// Mat3f Mat3f_ctor(Quaternion3f)
inline uniform Mat3f Mat3f_ctor(const uniform Quaternion3f q)
{
    return Mat3f_ctor(1.0f-2.0f*(q.j*q.j + q.k*q.k),      2.0f*(q.i*q.j + q.r*q.k),      2.0f*(q.i*q.k - q.r*q.j),
                           2.0f*(q.i*q.j - q.r*q.k), 1.0f-2.0f*(q.i*q.i + q.k*q.k),      2.0f*(q.j*q.k + q.r*q.i),
                           2.0f*(q.i*q.k + q.r*q.j),      2.0f*(q.j*q.k - q.r*q.i), 1.0f-2.0f*(q.i*q.i + q.j*q.j));
}

// Mat3f Mat3f_ctor(Quaternion3f)
inline varying Mat3f Mat3f_ctor(const varying Quaternion3f q)
{
    return Mat3f_ctor(1.0f-2.0f*(q.j*q.j + q.k*q.k),      2.0f*(q.i*q.j + q.r*q.k),      2.0f*(q.i*q.k - q.r*q.j),
                           2.0f*(q.i*q.j - q.r*q.k), 1.0f-2.0f*(q.i*q.i + q.k*q.k),      2.0f*(q.j*q.k + q.r*q.i),
                           2.0f*(q.i*q.k + q.r*q.j),      2.0f*(q.j*q.k - q.r*q.i), 1.0f-2.0f*(q.i*q.i + q.j*q.j));
}

//--------------------------------------------------------------------------------------------------
// Arithmetic
//--------------------------------------------------------------------------------------------------

// Mat3f = Mat3f + Mat3f
inline uniform Mat3f operator+(const uniform Mat3f m0, const uniform Mat3f m1)
{
    return Mat3f_ctor(m0.vx+m1.vx, m0.vy+m1.vy, m0.vz+m1.vz);
}

// Mat3f = Mat3f + Mat3f
inline varying Mat3f operator+(const varying Mat3f m0, const varying Mat3f m1)
{
    return Mat3f_ctor(m0.vx+m1.vx, m0.vy+m1.vy, m0.vz+m1.vz);
}

// Mat3f = Mat3f - Mat3f
inline uniform Mat3f operator-(const uniform Mat3f m0, const uniform Mat3f m1)
{
    return Mat3f_ctor(m0.vx-m1.vx, m0.vy-m1.vy, m0.vz-m1.vz);
}

// Mat3f = Mat3f - Mat3f
inline varying Mat3f operator-(const varying Mat3f m0, const varying Mat3f m1)
{
    return Mat3f_ctor(m0.vx-m1.vx, m0.vy-m1.vy, m0.vz-m1.vz);
}

// Mat3f = float * Mat3f
inline uniform Mat3f operator*(const uniform float f, const uniform Mat3f m)
{
    return Mat3f_ctor(f*m.vx, f*m.vy, f*m.vz);
}

// Mat3f = float * Mat3f
inline varying Mat3f operator*(const varying float f, const varying Mat3f m)
{
    return Mat3f_ctor(f*m.vx, f*m.vy, f*m.vz);
}

// Mat3f = Mat3f * float
inline uniform Mat3f operator*(const uniform Mat3f m, const uniform float f)
{
    return f * m;
}

// Mat3f = Mat3f * float
inline varying Mat3f operator*(const varying Mat3f m, const varying float f)
{
    return f * m;
}

// Vec3f = Vec3f * Mat3f
inline uniform Vec3f operator*(const uniform Vec3f v, const uniform Mat3f m)
{
    return v.x*m.vx + v.y*m.vy + v.z*m.vz;
}

// Vec3f = Vec3f * Mat3f
inline varying Vec3f operator*(const varying Vec3f v, const varying Mat3f m)
{
    return v.x*m.vx + v.y*m.vy + v.z*m.vz;
}

// Vec3f = Mat3f * Vec3f
inline uniform Vec3f operator*(const uniform Mat3f m, const uniform Vec3f v)
{
    return Vec3f_ctor(dot(m.vx,v), dot(m.vy,v), dot(m.vz,v));
}

// Vec3f = Mat3f * Vec3f
inline varying Vec3f operator*(const varying Mat3f m, const varying Vec3f v)
{
    return Vec3f_ctor(dot(m.vx,v), dot(m.vy,v), dot(m.vz,v));
}

// Mat3f = Mat3f * Mat3f
inline uniform Mat3f operator*(const uniform Mat3f m0, const uniform Mat3f m1)
{
    return Mat3f_ctor(m0.vx*m1, m0.vy*m1, m0.vz*m1);
}

// Mat3f = Mat3f * Mat3f
inline varying Mat3f operator*(const varying Mat3f m0, const varying Mat3f m1)
{
    return Mat3f_ctor(m0.vx*m1, m0.vy*m1, m0.vz*m1);
}

// Mat3f lerp(Mat3f, Mat3f, float)
inline uniform Mat3f lerp(const uniform Mat3f m0, const uniform Mat3f m1, const uniform float t)
{
    return (1.0f - t) * m0 + t * m1;
}

// Mat3f lerp(Mat3f, Mat3f, float)
inline varying Mat3f lerp(const varying Mat3f m0, const varying Mat3f m1, const varying float t)
{
    return (1.0f - t) * m0 + t * m1;
}

//--------------------------------------------------------------------------------------------------
// Equality
//--------------------------------------------------------------------------------------------------

// bool isEqual(Mat3f, Mat3f, float)
inline uniform bool isEqual(const uniform Mat3f m0, const uniform Mat3f m1, const uniform float tol)
{
    return isEqual(m0.vx, m1.vx, tol) && isEqual(m0.vy, m1.vy, tol) && isEqual(m0.vz, m1.vz, tol);
}

// bool isEqual(Mat3f, Mat3f, float)
inline varying bool isEqual(const varying Mat3f m0, const varying Mat3f m1, const varying float tol)
{
    return isEqual(m0.vx, m1.vx, tol) && isEqual(m0.vy, m1.vy, tol) && isEqual(m0.vz, m1.vz, tol);
}

// bool isEqual(Mat3f, Mat3f)
inline uniform bool isEqual(const uniform Mat3f m0, const uniform Mat3f m1)
{
    return isEqual(m0, m1, sEpsilon);
}

// bool isEqual(Mat3f, Mat3f)
inline varying bool isEqual(const varying Mat3f m0, const varying Mat3f m1)
{
    return isEqual(m0, m1, sEpsilon);
}

// bool isEqualFixedEps(Mat3f, Mat3f, float)
inline uniform bool isEqualFixedEps(const uniform Mat3f m0, const uniform Mat3f m1, const uniform float tol)
{
    return isEqualFixedEps(m0.vx, m1.vx, tol) &&
           isEqualFixedEps(m0.vy, m1.vy, tol) &&
           isEqualFixedEps(m0.vz, m1.vz, tol);
}

// bool isEqualFixedEps(Mat3f, Mat3f, float)
inline varying bool isEqualFixedEps(const varying Mat3f m0, const varying Mat3f m1, const varying float tol)
{
    return isEqualFixedEps(m0.vx, m1.vx, tol) &&
           isEqualFixedEps(m0.vy, m1.vy, tol) &&
           isEqualFixedEps(m0.vz, m1.vz, tol);
}

// bool isEqualFixedEps(Mat3f, Mat3f)
inline uniform bool isEqualFixedEps(const uniform Mat3f m0, const uniform Mat3f m1)
{
    return isEqualFixedEps(m0, m1, sEpsilon);
}

// bool isEqualFixedEps(Mat3f, Mat3f)
inline varying bool isEqualFixedEps(const varying Mat3f m0, const varying Mat3f m1)
{
    return isEqualFixedEps(m0, m1, sEpsilon);
}

//--------------------------------------------------------------------------------------------------
// Inverse et al
//--------------------------------------------------------------------------------------------------

// float det(Mat3f)
inline uniform float det(const uniform Mat3f m)
{
    return dot(m.vx, cross(m.vy, m.vz));
}

// float = det(Mat3f)
inline varying float det(const varying Mat3f m)
{
    return dot(m.vx, cross(m.vy, m.vz));
}

// Mat3f transpose(Mat3f)
inline uniform Mat3f transpose(const uniform Mat3f m)
{
    return Mat3f_ctor(m.vx.x, m.vy.x, m.vz.x,
                      m.vx.y, m.vy.y, m.vz.y,
                      m.vx.z, m.vy.z, m.vz.z);
}

// Mat3f transpose(Mat3f)
inline varying Mat3f transpose(const varying Mat3f m)
{
    return Mat3f_ctor(m.vx.x, m.vy.x, m.vz.x,
                      m.vx.y, m.vy.y, m.vz.y,
                      m.vx.z, m.vy.z, m.vz.z);
}

// Mat3f transpose(Mat3f)
inline uniform Mat3f adjoint(const uniform Mat3f m)
{
    return transpose(Mat3f_ctor(cross(m.vy, m.vz), cross(m.vz, m.vx), cross(m.vx, m.vy)));
}

// Mat3f transpose(Mat3f)
inline varying Mat3f adjoint(const varying Mat3f m)
{
    return transpose(Mat3f_ctor(cross(m.vy, m.vz), cross(m.vz, m.vx), cross(m.vx, m.vy)));
}

// Mat3f inverse(Mat3f)
inline uniform Mat3f inverse(const uniform Mat3f m)
{
    return rcp(det(m)) * adjoint(m);
}

// Mat3f inverse(Mat3f)
inline varying Mat3f inverse(const varying Mat3f m)
{
    return rcp(det(m)) * adjoint(m);
}

// Mat3f rcp(Mat3f)
inline uniform Mat3f rcp(const uniform Mat3f m)
{
    return inverse(m);
}

// Mat3f rcp(Mat3f)
inline varying Mat3f rcp(const varying Mat3f m)
{
    return inverse(m);
}

//--------------------------------------------------------------------------------------------------
// Transformations
//--------------------------------------------------------------------------------------------------

// Mat3f Mat3f_identity()
// Note: we can only define the uniform version, since overloaded functions cannot differ by return type alone.
// For the varying case, we rely on the compiler to convert to varying when the LHS of the assignment is varying.
inline uniform Mat3f Mat3f_identity()
{
    return Mat3f_ctor(1.0f, 0.0f, 0.0f,
                      0.0f, 1.0f, 0.0f,
                      0.0f, 0.0f, 1.0f);
}

// setToIdentity(Mat3f)
inline void setToIdentity(uniform Mat3f &m)
{
    m = Mat3f_identity();
}

// setToIdentity(Mat3f)
inline void setToIdentity(varying Mat3f &m)
{
    m = Mat3f_identity();
}

// Mat3f Mat3f_scale(Vec3f)
inline uniform Mat3f Mat3f_scale(const uniform Vec3f scale)
{
    return Mat3f_ctor(scale.x, 0.0f, 0.0f,
                      0.0f, scale.y, 0.0f,
                      0.0f, 0.0f, scale.z);
}

// Mat3f Mat3f_scale(Vec3f)
inline varying Mat3f Mat3f_scale(const varying Vec3f scale)
{
    return Mat3f_ctor(scale.x, 0.0f, 0.0f,
                      0.0f, scale.y, 0.0f,
                      0.0f, 0.0f, scale.z);
}

// setToScale(Mat3f, Vec3f)
inline void setToScale(uniform Mat3f &m, const uniform Vec3f scale)
{
    m = Mat3f_scale(scale);
}

// setToScale(Mat3f, Vec3f)
inline void setToScale(varying Mat3f &m, const varying Vec3f scale)
{
    m = Mat3f_scale(scale);
}

// Mat3f Mat3f_rotate(Vec3f axis, float angle)
inline uniform Mat3f Mat3f_rotate(const uniform Vec3f axis, const uniform float angle)
{
    uniform float s, c;
    sincos(angle, &s, &c);
    const uniform Vec3f v = normalize(axis);
    uniform float t = 1.0f - c;
    return Mat3f_ctor(v.x*v.x*t+c,     v.x*v.y*t+v.z*s, v.x*v.z*t-v.y*s,
                      v.y*v.x*t-v.z*s, v.y*v.y*t+c,     v.y*v.z*t+v.x*s,
                      v.z*v.x*t+v.y*s, v.z*v.y*t-v.x*s, v.z*v.z*t+c);
}

// Mat3f Mat3f_rotate(Vec3f axis, float angle)
inline varying Mat3f Mat3f_rotate(const varying Vec3f axis, const varying float angle)
{
    varying float s, c;
    sincos(angle, &s, &c);
    const varying Vec3f v = normalize(axis);
    varying float t = 1.0f - c;
    return Mat3f_ctor(v.x*v.x*t+c,     v.x*v.y*t+v.z*s, v.x*v.z*t-v.y*s,
                      v.y*v.x*t-v.z*s, v.y*v.y*t+c,     v.y*v.z*t+v.x*s,
                      v.z*v.x*t+v.y*s, v.z*v.y*t-v.x*s, v.z*v.z*t+c);
}

// setToRotation(Mat3f, Vec3f axis, Vec3f angle)
inline void setToRotation(uniform Mat3f &m, const uniform Vec3f axis, const uniform float angle)
{
    m = Mat3f_rotate(axis, angle);
}

// setToRotation(Mat3f, Vec3f axis, Vec3f angle)
inline void setToRotation(varying Mat3f &m, const varying Vec3f axis, const varying float angle)
{
    m = Mat3f_rotate(axis, angle);
}

// Vec3f = transform(Mat3f, Vec3f)
// Use this if v is a position vector
inline uniform Vec3f transform(const uniform Mat3f m, const uniform Vec3f v)
{
    return v * m;
}

// Vec3f = transform(Mat3f, Vec3f)
// Use this if v is a position vector
inline varying Vec3f transform(const varying Mat3f m, const varying Vec3f v)
{
    return v * m;
}

// Vec3f = transformNormal(Mat3f, Vec3f)
// Use this if v is a normal.
// We assume that m is already the inverse of the Mat3 used to transform positions
inline uniform Vec3f transformNormal(const uniform Mat3f m, const uniform Vec3f v)
{
    return m * v;
}

// Vec3f = transformNormal(Mat3f, Vec3f)
// Use this if v is a normal.
// We assume that m is already the inverse of the Mat3 used to transform positions
inline varying Vec3f transformNormal(const varying Mat3f m, const varying Vec3f v)
{
    return m * v;
}

