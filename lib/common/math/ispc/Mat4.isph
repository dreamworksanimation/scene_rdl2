// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file Mat4.isph
/// @brief
/// defines the 4x4 matrix type Mat4 and its methods
/// @details
/// The Mat4 class can be used to represent R^4 -> R^4 transformations.
/// Primarily this means scales, rotations, translations, and projections of
/// 3D homogeneous points, vectors, and normals stored as Vec4.  The matrices
/// are encoded such that when vec4' = vec4 *
/// mat4, vec4' is the transformed version of vec4 - i.e. matrix on the right,
/// vector on the left.  To reduce ambiguity, a set of transform() functions
/// are given that can be used in lieu of the raw "*" operator.

#pragma once

#include "asA.isph"
#include "Constants.isph"
#include "Mat3.isph"
#include "Math.isph"
#include "Vec3.isph"
#include "Vec4.isph"

//--------------------------------------------------------------------------------------------------
// Types
//--------------------------------------------------------------------------------------------------

struct Mat4f
{
    Vec4f vx;
    Vec4f vy;
    Vec4f vz;
    Vec4f vw;
};

//--------------------------------------------------------------------------------------------------
// Constructors
//--------------------------------------------------------------------------------------------------

// Mat4f = {vx, vy, vz, vw}
inline uniform Mat4f Mat4f_ctor(const uniform Vec4f vx, const uniform Vec4f vy,
                                const uniform Vec4f vz, const uniform Vec4f vw)
{
    uniform Mat4f result;
    result.vx = vx;
    result.vy = vy;
    result.vz = vz;
    result.vw = vw;
    return result;
}

// Mat4f = {vx, vy, vz, vw}
inline varying Mat4f Mat4f_ctor(const varying Vec4f vx, const varying Vec4f vy,
                                const varying Vec4f vz, const varying Vec4f vw)
{
    varying Mat4f result;
    result.vx = vx;
    result.vy = vy;
    result.vz = vz;
    result.vw = vw;
    return result;
}

// Mat4f = {m00, ..., m33}
inline uniform Mat4f Mat4f_ctor(const uniform float m00, const uniform float m01, const uniform float m02, const uniform float m03, 
                                const uniform float m10, const uniform float m11, const uniform float m12, const uniform float m13, 
                                const uniform float m20, const uniform float m21, const uniform float m22, const uniform float m23, 
                                const uniform float m30, const uniform float m31, const uniform float m32, const uniform float m33) 
{
    return Mat4f_ctor(Vec4f_ctor(m00, m01, m02, m03),
                      Vec4f_ctor(m10, m11, m12, m13),
                      Vec4f_ctor(m20, m21, m22, m23),
                      Vec4f_ctor(m30, m31, m32, m33));
}

// Mat4f = {m00, ..., m33}
inline varying Mat4f Mat4f_ctor(const varying float m00, const varying float m01, const varying float m02, const varying float m03, 
                                const varying float m10, const varying float m11, const varying float m12, const varying float m13, 
                                const varying float m20, const varying float m21, const varying float m22, const varying float m23, 
                                const varying float m30, const varying float m31, const varying float m32, const varying float m33) 
{
    return Mat4f_ctor(Vec4f_ctor(m00, m01, m02, m03),
                      Vec4f_ctor(m10, m11, m12, m13),
                      Vec4f_ctor(m20, m21, m22, m23),
                      Vec4f_ctor(m30, m31, m32, m33));
}

//--------------------------------------------------------------------------------------------------
// Arithmetic
//--------------------------------------------------------------------------------------------------

// Mat4f = Mat4f + Mat4f
inline uniform Mat4f operator+(const uniform Mat4f m0, const uniform Mat4f m1)
{
    return Mat4f_ctor(m0.vx+m1.vx, m0.vy+m1.vy, m0.vz+m1.vz, m0.vw+m1.vw);
}

// Mat4f = Mat4f + Mat4f
inline varying Mat4f operator+(const varying Mat4f m0, const varying Mat4f m1)
{
    return Mat4f_ctor(m0.vx+m1.vx, m0.vy+m1.vy, m0.vz+m1.vz, m0.vw+m1.vw);
}

// Mat4f = Mat4f - Mat4f
inline uniform Mat4f operator-(const uniform Mat4f m0, const uniform Mat4f m1)
{
    return Mat4f_ctor(m0.vx-m1.vx, m0.vy-m1.vy, m0.vz-m1.vz, m0.vw-m1.vw);
}

// Mat4f = Mat4f - Mat4f
inline varying Mat4f operator-(const varying Mat4f m0, const varying Mat4f m1)
{
    return Mat4f_ctor(m0.vx-m1.vx, m0.vy-m1.vy, m0.vz-m1.vz, m0.vw-m1.vw);
}

// Mat4f = float * Mat4f
inline uniform Mat4f operator*(const uniform float f, const uniform Mat4f m)
{
    return Mat4f_ctor(f*m.vx, f*m.vy, f*m.vz, f*m.vw);
}

// Mat4f = float * Mat4f
inline varying Mat4f operator*(const varying float f, const varying Mat4f m)
{
    return Mat4f_ctor(f*m.vx, f*m.vy, f*m.vz, f*m.vw);
}

// Mat4f = Mat4f * float
inline uniform Mat4f operator*(const uniform Mat4f m, const uniform float f)
{
    return f * m;
}

// Mat4f = Mat4f * float
inline varying Mat4f operator*(const varying Mat4f m, const varying float f)
{
    return f * m;
}

// Vec4f = Vec4f * Mat4f
inline uniform Vec4f operator*(const uniform Vec4f v, const uniform Mat4f m)
{
    return v.x*m.vx + v.y*m.vy + v.z*m.vz + v.w*m.vw;
}

// Vec4f = Vec4f * Mat4f
inline varying Vec4f operator*(const varying Vec4f v, const varying Mat4f m)
{
    return v.x*m.vx + v.y*m.vy + v.z*m.vz + v.w*m.vw;
}

// Vec4f = Mat4f * Vec4f
inline uniform Vec4f operator*(const uniform Mat4f m, const uniform Vec4f v)
{
    return Vec4f_ctor(dot(m.vx,v), dot(m.vy,v), dot(m.vz,v), dot(m.vw,v));
}

// Vec4f = Mat4f * Vec4f
inline varying Vec4f operator*(const varying Mat4f m, const varying Vec4f v)
{
    return Vec4f_ctor(dot(m.vx,v), dot(m.vy,v), dot(m.vz,v), dot(m.vw,v));
}

// Mat4f = Mat4f * Mat4f
inline uniform Mat4f operator*(const uniform Mat4f m0, const uniform Mat4f m1)
{
    return Mat4f_ctor(m0.vx*m1, m0.vy*m1, m0.vz*m1, m0.vw*m1);
}

// Mat4f = Mat4f * Mat4f
inline varying Mat4f operator*(const varying Mat4f m0, const varying Mat4f m1)
{
    return Mat4f_ctor(m0.vx*m1, m0.vy*m1, m0.vz*m1, m0.vw*m1);
}

//--------------------------------------------------------------------------------------------------
// Equality
//--------------------------------------------------------------------------------------------------

// bool isEqual(Mat4f, Mat4f, float)
inline uniform bool isEqual(const uniform Mat4f m0, const uniform Mat4f m1, const uniform float tol)
{
    return isEqual(m0.vx, m1.vx, tol) &&
           isEqual(m0.vy, m1.vy, tol) &&
           isEqual(m0.vz, m1.vz, tol) &&
           isEqual(m0.vw, m1.vw, tol);
}

// bool isEqual(Mat4f, Mat4f, float)
inline varying bool isEqual(const varying Mat4f m0, const varying Mat4f m1, const varying float tol)
{
    return isEqual(m0.vx, m1.vx, tol) &&
           isEqual(m0.vy, m1.vy, tol) &&
           isEqual(m0.vz, m1.vz, tol) &&
           isEqual(m0.vw, m1.vw, tol);
}

// bool isEqual(Mat4f, Mat4f)
inline uniform bool isEqual(const uniform Mat4f m0, const uniform Mat4f m1)
{
    return isEqual(m0, m1, sEpsilon);
}

// bool isEqual(Mat4f, Mat4f)
inline varying bool isEqual(const varying Mat4f m0, const varying Mat4f m1)
{
    return isEqual(m0, m1, sEpsilon);
}

// bool isEqualFixedEps(Mat4f, Mat4f, float)
inline uniform bool isEqualFixedEps(const uniform Mat4f m0, const uniform Mat4f m1, const uniform float tol)
{
    return isEqualFixedEps(m0.vx, m1.vx, tol) &&
           isEqualFixedEps(m0.vy, m1.vy, tol) &&
           isEqualFixedEps(m0.vz, m1.vz, tol) &&
           isEqualFixedEps(m0.vw, m1.vw, tol);
}

// bool isEqualFixedEps(Mat4f, Mat4f, float)
inline varying bool isEqualFixedEps(const varying Mat4f m0, const varying Mat4f m1, const varying float tol)
{
    return isEqualFixedEps(m0.vx, m1.vx, tol) &&
           isEqualFixedEps(m0.vy, m1.vy, tol) &&
           isEqualFixedEps(m0.vz, m1.vz, tol) &&
           isEqualFixedEps(m0.vw, m1.vw, tol);
}

// bool isEqualFixedEps(Mat4f, Mat4f)
inline uniform bool isEqualFixedEps(const uniform Mat4f m0, const uniform Mat4f m1)
{
    return isEqualFixedEps(m0, m1, sEpsilon);
}

// bool isEqualFixedEps(Mat4f, Mat4f)
inline varying bool isEqualFixedEps(const varying Mat4f m0, const varying Mat4f m1)
{
    return isEqualFixedEps(m0, m1, sEpsilon);
}

//--------------------------------------------------------------------------------------------------
// Inverse et al
//--------------------------------------------------------------------------------------------------

// float det(Mat4f)
#define MAT4F_DET(UV)                                                                   \
{                                                                                       \
    const UV Vec3f vx = asAVec3f(m.vx);                                                 \
    const UV Vec3f vy = asAVec3f(m.vy);                                                 \
    const UV Vec3f vz = asAVec3f(m.vz);                                                 \
    const UV Vec3f vw = asAVec3f(m.vw);                                                 \
    const UV float x0 = (m.vx.w == 0.0f) ? 0.0f : m.vx.w * det(Mat3f_ctor(vy, vz, vw)); \
    const UV float x1 = (m.vy.w == 0.0f) ? 0.0f : m.vy.w * det(Mat3f_ctor(vx, vz, vw)); \
    const UV float x2 = (m.vz.w == 0.0f) ? 0.0f : m.vz.w * det(Mat3f_ctor(vx, vy, vw)); \
    const UV float x3 = (m.vw.w == 0.0f) ? 0.0f : m.vw.w * det(Mat3f_ctor(vx, vy, vz)); \
    return -x0 + x1 - x2 + x3;                                                          \
}

// float det(Mat4f)
inline uniform float det(const uniform Mat4f m)
{
    MAT4F_DET(uniform);
}

// float det(Mat4f)
inline varying float det(const varying Mat4f m)
{
    MAT4F_DET(varying);
}

// Mat4f transpose(Mat4f)
inline uniform Mat4f transpose(const uniform Mat4f m)
{
    return Mat4f_ctor(m.vx.x, m.vy.x, m.vz.x, m.vw.x,
                      m.vx.y, m.vy.y, m.vz.y, m.vw.y,
                      m.vx.z, m.vy.z, m.vz.z, m.vw.z,
                      m.vx.w, m.vy.w, m.vz.w, m.vw.w);
}

// Mat4f transpose(Mat4f)
inline varying Mat4f transpose(const varying Mat4f m)
{
    return Mat4f_ctor(m.vx.x, m.vy.x, m.vz.x, m.vw.x,
                      m.vx.y, m.vy.y, m.vz.y, m.vw.y,
                      m.vx.z, m.vy.z, m.vz.z, m.vw.z,
                      m.vx.w, m.vy.w, m.vz.w, m.vw.w);
}

// Mat4f adjoint(Mat4f)
#define MAT4F_ADJOINT(UV)                                       \
{                                                               \
    const UV Vec3f vXxyz = Vec3f_ctor(m.vx.x, m.vx.y, m.vx.z);  \
    const UV Vec3f vXxyw = Vec3f_ctor(m.vx.x, m.vx.y, m.vx.w);  \
    const UV Vec3f vXxzw = Vec3f_ctor(m.vx.x, m.vx.z, m.vx.w);  \
    const UV Vec3f vXyzw = Vec3f_ctor(m.vx.y, m.vx.z, m.vx.w);  \
    const UV Vec3f vYxyz = Vec3f_ctor(m.vy.x, m.vy.y, m.vy.z);  \
    const UV Vec3f vYxyw = Vec3f_ctor(m.vy.x, m.vy.y, m.vy.w);  \
    const UV Vec3f vYxzw = Vec3f_ctor(m.vy.x, m.vy.z, m.vy.w);  \
    const UV Vec3f vYyzw = Vec3f_ctor(m.vy.y, m.vy.z, m.vy.w);  \
    const UV Vec3f vZxyz = Vec3f_ctor(m.vz.x, m.vz.y, m.vz.z);  \
    const UV Vec3f vZxyw = Vec3f_ctor(m.vz.x, m.vz.y, m.vz.w);  \
    const UV Vec3f vZxzw = Vec3f_ctor(m.vz.x, m.vz.z, m.vz.w);  \
    const UV Vec3f vZyzw = Vec3f_ctor(m.vz.y, m.vz.z, m.vz.w);  \
    const UV Vec3f vWxyz = Vec3f_ctor(m.vw.x, m.vw.y, m.vw.z);  \
    const UV Vec3f vWxyw = Vec3f_ctor(m.vw.x, m.vw.y, m.vw.w);  \
    const UV Vec3f vWxzw = Vec3f_ctor(m.vw.x, m.vw.z, m.vw.w);  \
    const UV Vec3f vWyzw = Vec3f_ctor(m.vw.y, m.vw.z, m.vw.w);  \
    const UV float m00 =  det(Mat3f_ctor(vYyzw, vZyzw, vWyzw)); \
    const UV float m01 = -det(Mat3f_ctor(vYxzw, vZxzw, vWxzw)); \
    const UV float m02 =  det(Mat3f_ctor(vYxyw, vZxyw, vWxyw)); \
    const UV float m03 = -det(Mat3f_ctor(vYxyz, vZxyz, vWxyz)); \
    const UV float m10 = -det(Mat3f_ctor(vXyzw, vZyzw, vWyzw)); \
    const UV float m11 =  det(Mat3f_ctor(vXxzw, vZxzw, vWxzw)); \
    const UV float m12 = -det(Mat3f_ctor(vXxyw, vZxyw, vWxyw)); \
    const UV float m13 =  det(Mat3f_ctor(vXxyz, vZxyz, vWxyz)); \
    const UV float m20 =  det(Mat3f_ctor(vXyzw, vYyzw, vWyzw)); \
    const UV float m21 = -det(Mat3f_ctor(vXxzw, vYxzw, vWxzw)); \
    const UV float m22 =  det(Mat3f_ctor(vXxyw, vYxyw, vWxyw)); \
    const UV float m23 = -det(Mat3f_ctor(vXxyz, vYxyz, vWxyz)); \
    const UV float m30 = -det(Mat3f_ctor(vXyzw, vYyzw, vZyzw)); \
    const UV float m31 =  det(Mat3f_ctor(vXxzw, vYxzw, vZxzw)); \
    const UV float m32 = -det(Mat3f_ctor(vXxyw, vYxyw, vZxyw)); \
    const UV float m33 =  det(Mat3f_ctor(vXxyz, vYxyz, vZxyz)); \
    return Mat4f_ctor(m00, m10, m20, m30,                       \
                      m01, m11, m21, m31,                       \
                      m02, m12, m22, m32,                       \
                      m03, m13, m23, m33);                      \
}

// Mat4f adjoint(Mat4f)
inline uniform Mat4f adjoint(const uniform Mat4f m)
{
    MAT4F_ADJOINT(uniform);
}

// Mat4f adjoint(Mat4f)
inline varying Mat4f adjoint(const varying Mat4f m)
{
    MAT4F_ADJOINT(varying);
}

// Mat4f inverse(Mat4f)
inline uniform Mat4f inverse(const uniform Mat4f m)
{
    return rcp(det(m)) * adjoint(m);
}

// Mat4f inverse(Mat4f)
inline varying Mat4f inverse(const varying Mat4f m)
{
    return rcp(det(m)) * adjoint(m);
}

// Mat4f rcp(Mat4f)
inline uniform Mat4f rcp(const uniform Mat4f m)
{
    return inverse(m);
}

// Mat4f rcp(Mat4f)
inline varying Mat4f rcp(const varying Mat4f m)
{
    return inverse(m);
}

//--------------------------------------------------------------------------------------------------
// Transformations
//--------------------------------------------------------------------------------------------------

// Mat4f Mat4f_identity()
// Note: we can only define the uniform version, since overloaded functions cannot differ by return type alone.
// For the varying case, we rely on the compiler to convert to varying when the LHS of the assignment is varying.
inline uniform Mat4f Mat4f_identity()
{
    return Mat4f_ctor(1.0f, 0.0f, 0.0f, 0.0f,
                      0.0f, 1.0f, 0.0f, 0.0f,
                      0.0f, 0.0f, 1.0f, 0.0f,
                      0.0f, 0.0f, 0.0f, 1.0f);
}

// setToIdentity(Mat4f)
inline void setToIdentity(uniform Mat4f &m)
{
    m = Mat4f_identity();
}

// setToIdentity(Mat4f)
inline void setToIdentity(varying Mat4f &m)
{
    m = Mat4f_identity();
}

// Mat4f Mat4f_scale(Vec3f)
inline uniform Mat4f Mat4f_scale(const uniform Vec3f scale)
{
    return Mat4f_ctor(scale.x, 0.0f, 0.0f, 0.0f,
                      0.0f, scale.y, 0.0f, 0.0f,
                      0.0f, 0.0f, scale.z, 0.0f,
                      0.0f, 0.0f, 0.0f,    1.0f);
}

// Mat4f Mat4f_scale(Vec3f)
inline varying Mat4f Mat4f_scale(const varying Vec3f scale)
{
    return Mat4f_ctor(scale.x, 0.0f, 0.0f, 0.0f,
                      0.0f, scale.y, 0.0f, 0.0f,
                      0.0f, 0.0f, scale.z, 0.0f,
                      0.0f, 0.0f, 0.0f,    1.0f);
}

// setToScale(Mat4f, Vec3f)
inline void setToScale(uniform Mat4f &m, const uniform Vec3f scale)
{
    m = Mat4f_scale(scale);
}

// setToScale(Mat4f, Vec3f)
inline void setToScale(varying Mat4f &m, const varying Vec3f scale)
{
    m = Mat4f_scale(scale);
}

// Mat4f Mat4f_rotate(Vec3f axis, float angle)
inline uniform Mat4f Mat4f_rotate(const uniform Vec3f axis, const uniform float angle)
{
    uniform float s, c;
    sincos(angle, &s, &c);
    uniform Vec3f v = normalize(axis);
    uniform float t = 1.0f - c;
    return Mat4f_ctor(v.x*v.x*t+c,     v.x*v.y*t+v.z*s, v.x*v.z*t-v.y*s, 0.0f,
                      v.y*v.x*t-v.z*s, v.y*v.y*t+c,     v.y*v.z*t+v.x*s, 0.0f,
                      v.z*v.x*t+v.y*s, v.z*v.y*t-v.x*s, v.z*v.z*t+c,     0.0f,
                      0.0f,            0.0f,            0.0f,            1.0f);
}

// Mat4f Mat4f_rotate(Vec3f axis, float angle)
inline varying Mat4f Mat4f_rotate(const varying Vec3f axis, const varying float angle)
{
    varying float s, c;
    sincos(angle, &s, &c);
    varying Vec3f v = normalize(axis);
    varying float t = 1.0f - c;
    return Mat4f_ctor(v.x*v.x*t+c,     v.x*v.y*t+v.z*s, v.x*v.z*t-v.y*s, 0.0f,
                      v.y*v.x*t-v.z*s, v.y*v.y*t+c,     v.y*v.z*t+v.x*s, 0.0f,
                      v.z*v.x*t+v.y*s, v.z*v.y*t-v.x*s, v.z*v.z*t+c,     0.0f,
                      0.0f,            0.0f,            0.0f,            1.0f);
}

// setToRotation(Mat4f, Vec3f axis, Vec3f angle)
inline void setToRotation(uniform Mat4f &m, const uniform Vec3f axis, const uniform float angle)
{
    m = Mat4f_rotate(axis, angle);
}

// setToRotation(Mat4f, Vec3f axis, Vec3f angle)
inline void setToRotation(varying Mat4f &m, const varying Vec3f axis, const varying float angle)
{
    m = Mat4f_rotate(axis, angle);
}

// Mat4f Mat4f_translate(Vec3f)
inline uniform Mat4f Mat4f_translate(const uniform Vec3f trn)
{
    return Mat4f_ctor(1.0f,  0.0f,  0.0f,  0.0f,
                      0.0f,  1.0f,  0.0f,  0.0f,
                      0.0f,  0.0f,  1.0f,  0.0f,
                      trn.x, trn.y, trn.z, 1.0f);
}

// Mat4f Mat4f_translate(Vec3f)
inline varying Mat4f Mat4f_translate(const varying Vec3f trn)
{
    return Mat4f_ctor(1.0f,  0.0f,  0.0f,  0.0f,
                      0.0f,  1.0f,  0.0f,  0.0f,
                      0.0f,  0.0f,  1.0f,  0.0f,
                      trn.x, trn.y, trn.z, 1.0f);
}

// setToTranslation(Mat4f, Vec3f)
inline void setToTranslation(uniform Mat4f &m, const uniform Vec3f trn)
{
    m = Mat4f_translate(trn);
}

// setToTranslation(Mat4f, Vec3f)
inline void setToTranslation(varying Mat4f &m, const varying Vec3f trn)
{
    m = Mat4f_translate(trn);
}

// Vec4f transform(Mat4f, Vec4f)
// Use this if v is a position vector
inline uniform Vec4f transform(const uniform Mat4f m, const uniform Vec4f v)
{
    return v * m;
}

// Vec4f = transform(Mat4f, Vec4f)
// Use this if v is a position vector
inline varying Vec4f transform(const varying Mat4f m, const varying Vec4f v)
{
    return v * m;
}

// Vec3f transformPoint(Mat4f, Vec3f)
// Use this if v is a position vector
inline uniform Vec3f transformPoint(const uniform Mat4f m, const uniform Vec3f v)
{
    return asAVec3f(Vec4f_ctor(v.x, v.y, v.z, 1.0f) * m);
}

// Vec3f transformPoint(Mat4f, Vec3f)
// Use this if v is a position vector
inline varying Vec3f transformPoint(const varying Mat4f m, const varying Vec3f v)
{
    return asAVec3f(Vec4f_ctor(v.x, v.y, v.z, 1.0f) * m);
}

// Vec3f transform3x3(Vec3f, Mat4f)
// Transform v using only the 3x3 portion of m (i.e. translation is ignored)
inline uniform Vec3f transform3x3(const uniform Vec3f v, const uniform Mat4f m)
{
    return v.x * asAVec3f(m.vx) + v.y * asAVec3f(m.vy) + v.z * asAVec3f(m.vz);
}

// Vec3f transform3x3(Vec3f, Mat4f)
// Transform v using only the 3x3 portion of m (i.e. translation is ignored)
inline varying Vec3f transform3x3(const varying Vec3f v, const varying Mat4f m)
{
    return v.x * asAVec3f(m.vx) + v.y * asAVec3f(m.vy) + v.z * asAVec3f(m.vz);
}

// Vec3f transformVector(Mat4f, Vec3f)
// Transform v ignoring the translation part of m
inline uniform Vec3f transformVector(const uniform Mat4f m, const uniform Vec3f v)
{
    return transform3x3(v, m);
}

// Vec3f transformVector(Mat4f, Vec3f)
// Transform v ignoring the translation part of m
inline varying Vec3f transformVector(const varying Mat4f m, const varying Vec3f v)
{
    return transform3x3(v, m);
}

// Vec4f = transformNormal(Mat4f, Vec4f)
// Use this if v is a normal.
// We assume that m is already the inverse of the Mat3 used to transform positions
inline uniform Vec4f transformNormal(const uniform Mat4f m, const uniform Vec4f v)
{
    return m * v;
}

// Vec4f = transformNormal(Mat4f, Vec4f)
// Use this if v is a normal.
// We assume that m is already the inverse of the Mat3 used to transform positions
inline varying Vec4f transformNormal(const varying Mat4f m, const varying Vec4f v)
{
    return m * v;
}

// Vec3f transformNormal(Mat4f, Vec3f)
// Use this if v is a normal.
// We assume that m is already the inverse of the Mat3 used to transform positions
inline uniform Vec3f transformNormal(const uniform Mat4f m, const uniform Vec3f v)
{
    return Vec3f_ctor(dot(asAVec3f(m.vx),v), dot(asAVec3f(m.vy),v), dot(asAVec3f(m.vz),v));
}

// Vec3f transformNormal(Mat4f, Vec3f)
// Use this if v is a normal.
// We assume that m is already the inverse of the Mat3 used to transform positions
inline varying Vec3f transformNormal(const varying Mat4f m, const varying Vec3f v)
{
    return Vec3f_ctor(dot(asAVec3f(m.vx),v), dot(asAVec3f(m.vy),v), dot(asAVec3f(m.vz),v));
}

// Vec3f transformH(Mat4f, Vec4f)
// Transform p by m and then perform a homogeneous divide
inline uniform Vec3f transformH(const uniform Mat4f m, const uniform Vec4f p)
{
    const uniform Vec4f v = p * m;
    return (v.w != 0.0f) ? asAVec3f(v) * rcp(v.w) : Vec3f_ctor(0.0f);
}

// Vec3f transformH(Mat4f, Vec4f)
// Transform p by m and then perform a homogeneous divide
inline varying Vec3f transformH(const varying Mat4f m, const varying Vec4f p)
{
    const varying Vec4f v = p * m;
    return (v.w != 0.0f) ? asAVec3f(v) * rcp(v.w) : Vec3f_ctor(0.0f);
}

