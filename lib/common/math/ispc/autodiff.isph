// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file autodiff.isph
/// @brief Convenient autodiff aliases
/// @details
/// This file contains convenient typedefs, constructors, and converters
/// for the renderer's commonly used autodiff types.  It is a convenience layer
/// on top of the core dual types.
#pragma once

#include "Col3.isph"
#include "Color.isph"
#include "Dual.isph"
#include "Variform.isph"
#include "Vec2.isph"
#include "Vec3.isph"
#include "Vec4.isph"

//----------------------------------------------------------------------
// Dual3f is our standard dual type.
//----------------------------------------------------------------------
/// @struct Dual
/// @brief alias of Dual3f
typedef Dual3f Dual;

/**
 * @{
 * Construct a constant Dual
 * val = p0, dx = 0, dy = 0, dz = 0
 */
MATH_DEFINE_UNARY_VARIFORM(Dual_ctor, Dual, float, { result = Dual3f_ctor(p0); })
/** @} */
/**
 * @{
 * Construct a seeded Dual
 * val = p0, dx = p1, dy = p2, dz = p3
 */
MATH_DEFINE_QUATERNION_VARIFORM(Dual_ctor, Dual, float, float, float, float,
                                { result = Dual3f_ctor(p0, p1, p2, p3); })
/** @} */


//----------------------------------------------------------------------
// "Col3Dual3f" is our standard color type.
//----------------------------------------------------------------------
/// @struct ColorDual
/// @brief alias of Col3Dual3f
typedef Col3Dual3f ColorDual;

/**
 * @{
 * Construct a constant ColorDual
 * val = (p0.r, p0.g, p0.b),
 * dx = (0 ,0, 0)
 * dy = (0, 0, 0)
 * dz = (0, 0, 0)
 */
MATH_DEFINE_UNARY_VARIFORM(ColorDual_ctor, ColorDual, Color,
                           { result = Col3Dual3f_ctor(Dual_ctor(p0.r),
                                                      Dual_ctor(p0.g),
                                                      Dual_ctor(p0.b)); })
/** @} */



/**
 * @{
 * Construct a seeded ColorDual
 * val = (eval(p0), eval(p0), eval(p0))
 * dx = (dDx(p0), dDx(p0), dDx(p0))
 * dy = (dDy(p0), dDy(p0), dDy(p0))
 * dz = (dDz(p0), dDz(p0), dDz(p0))
 */
MATH_DEFINE_UNARY_VARIFORM(ColorDual_ctor, ColorDual, Dual,
                           { result = Col3Dual3f_ctor(p0); })
/** @} */
/**
 * @{
 * Construct a seeded ColorDual
 * val = (eval(p0), eval(p1), eval(p2))
 * dx = (dDx(p0), dDx(p1), dDx(p2))
 * dy = (dDy(p0), dDy(p1), dDy(p2))
 * dz = (dDz(p0), dDz(p1), dDz(p2))
 */
MATH_DEFINE_TERNARY_VARIFORM(ColorDual_ctor, ColorDual, Dual, Dual, Dual,
                             { result = Col3Dual3f_ctor(p0, p1, p2); })
/** @} */

/**
 * @{
 * Construct a seeded ColorDual
 * val = (p0.r, p0.g, p0.b)
 * dx = (p1.r, p1.g, p1.b)
 * dy = (p2.r, p2.g, p2.b)
 * dz = (p3.r, p3.g, p3.b)
 */
MATH_DEFINE_QUATERNION_VARIFORM(ColorDual_ctor, ColorDual, Color, Color, Color, Color,
                                { result = Col3Dual3f_ctor(Dual_ctor(p0.r, p1.r, p2.r, p3.r),
                                                           Dual_ctor(p0.g, p1.g, p2.g, p3.g),
                                                           Dual_ctor(p0.b, p1.b, p2.b, p3.b)); })
/** @} */

/**
 * @{
 * Evaluate a ColorDual as a Color
 */
MATH_DEFINE_UNARY_VARIFORM(eval, Color, ColorDual,
                           { return Color_ctor(eval(p0.r), eval(p0.g), eval(p0.b)); })
/** @} */

/**
 * @{
 * Evaluate dx of a ColorDual as a Color
 */
MATH_DEFINE_UNARY_VARIFORM(dDx, Color, ColorDual,
                           { return Color_ctor(dDx(p0.r), dDx(p0.g), dDx(p0.b)); })
/** @} */

/**
 * @{
 * Evaluate dy of a ColorDual as a Color
 */
MATH_DEFINE_UNARY_VARIFORM(dDy, Color, ColorDual,
                           { return Color_ctor(dDy(p0.r), dDy(p0.g), dDy(p0.b)); })
/** @} */

/**
 * @{
 * Evaluate dz of a ColorDual as a Color
 */
MATH_DEFINE_UNARY_VARIFORM(dDz, Color, ColorDual,
                           { return Color_ctor(dDz(p0.r), dDz(p0.g), dDz(p0.b)); })
/** @} */

//----------------------------------------------------------------------
// "Vec4Dual3f" is our standard vec4 type
//----------------------------------------------------------------------
/// @struct Vec4Dual
/// @brief alias of a Vec4Dual3f
typedef Vec4Dual3f Vec4Dual;

/**
 * @{
 * Construct a constant Vec4Dual
 * val = (p0.x, p0.y, p0.z),
 * dx = (0 ,0, 0)
 * dy = (0, 0, 0)
 * dz = (0, 0, 0)
 */
MATH_DEFINE_UNARY_VARIFORM(Vec4Dual_ctor, Vec4Dual, Vec4f,
                           { result = Vec4Dual3f_ctor(Dual_ctor(p0.x),
                                                      Dual_ctor(p0.y),
                                                      Dual_ctor(p0.z),
                                                      Dual_ctor(p0.w)); })
/** @} */

/**
 * @{
 * Construct a seeded Vec4Dual
 * val = (eval(p0), eval(p0), eval(p0), eval(p0))
 * dx = (dDx(p0), dDx(p0), dDx(p0), dDx(p0))
 * dy = (dDy(p0), dDy(p0), dDy(p0), dDy(p0))
 * dz = (dDz(p0), dDz(p0), dDz(p0), dDz(p0))
 */
MATH_DEFINE_UNARY_VARIFORM(Vec4Dual_ctor, Vec4Dual, Dual,
                           { result = Vec4Dual3f_ctor(p0); })
/** @} */
/**
 * @{
 * Construct a seeded Vec4Dual
 * val = (eval(p0), eval(p1), eval(p2), eval(p3))
 * dx = (dDx(p0), dDx(p1), dDx(p2), dDx(p3))
 * dy = (dDy(p0), dDy(p1), dDy(p2), dDy(p3))
 * dz = (dDz(p0), dDz(p1), dDz(p2), dDz(p3))
 */
MATH_DEFINE_QUATERNION_VARIFORM(Vec4Dual_ctor, Vec4Dual,
                                Dual, Dual, Dual, Dual,
                                { result = Vec4Dual3f_ctor(p0, p1, p2, p3); })
/** @} */

/**
 * @{
 * Construct a seeded Vec4Dual
 * val = (p0.x, p0.y, p0.z, p0.w)
 * dx = (p1.x, p1.y, p1.z, p1.w)
 * dy = (p2.x, p2.y, p2.z, p2.w)
 * dz = (p3.x, p3.y, p3.z, p3.w)
 */
MATH_DEFINE_QUATERNION_VARIFORM(Vec4Dual_ctor, Vec4Dual,
                                Vec4f, Vec4f, Vec4f, Vec4f,
                                { result = Vec4Dual3f_ctor(Dual_ctor(p0.x, p1.x, p2.x, p3.x),
                                                           Dual_ctor(p0.y, p1.y, p2.y, p3.y),
                                                           Dual_ctor(p0.z, p1.z, p2.z, p3.z),
                                                           Dual_ctor(p0.w, p1.w, p2.w, p3.w)); })
/** @} */

/**
 * @{
 * Evaluate a Vec4Dual as a Vec4f
 */
MATH_DEFINE_UNARY_VARIFORM(eval, Vec4f, Vec4Dual,
                           { return Vec4f_ctor(eval(p0.x), eval(p0.y), eval(p0.z), eval(p0.w)); })
/** @} */

/**
 * @{
 * Evaluate dx of a Vec4Dual as a Vec4f
 */
MATH_DEFINE_UNARY_VARIFORM(dDx, Vec4f, Vec4Dual,
                           { return Vec4f_ctor(dDx(p0.x), dDx(p0.y), dDx(p0.z), dDx(p0.w)); })
/** @} */

/**
 * @{
 * Evaluate dy of a Vec4Dual as a Vec4f
 */
MATH_DEFINE_UNARY_VARIFORM(dDy, Vec4f, Vec4Dual,
                           { return Vec4f_ctor(dDy(p0.x), dDy(p0.y), dDy(p0.z), dDy(p0.w)); })
/** @} */

/**
 * @{
 * Evaluate dz of a Vec4Dual as a Vec4f
 */
MATH_DEFINE_UNARY_VARIFORM(dDz, Vec4f, Vec4Dual,
                           { return Vec4f_ctor(dDz(p0.x), dDz(p0.y), dDz(p0.z), dDz(p0.w)); })
/** @} */

//----------------------------------------------------------------------
// "Vec3Dual3f" is our standard vec3 type
//----------------------------------------------------------------------
/// @struct Vec3Dual
/// @brief alias of a Vec3Dual3f
typedef Vec3Dual3f Vec3Dual;

/**
 * @{
 * Construct a seeded Vec3Dual
 * val = (eval(p0), eval(p0), eval(p0))
 * dx = (dDx(p0), dDx(p0), dDx(p0))
 * dy = (dDy(p0), dDy(p0), dDy(p0))
 * dz = (dDz(p0), dDz(p0), dDz(p0))
 */
MATH_DEFINE_UNARY_VARIFORM(Vec3Dual_ctor, Vec3Dual, Dual,
                           { result = Vec3Dual3f_ctor(p0); })
/** @} */

/**
 * @{
 * Construct a seeded Vec3Dual
 * val = (eval(p0), eval(p1), eval(p2))
 * dx = (dDx(p0), dDx(p1), dDx(p2))
 * dy = (dDy(p0), dDy(p1), dDy(p2))
 * dz = (dDz(p0), dDz(p1), dDz(p2))
 */
MATH_DEFINE_TERNARY_VARIFORM(Vec3Dual_ctor, Vec3Dual, Dual, Dual, Dual,
                             { result = Vec3Dual3f_ctor(p0, p1, p2); })
/** @} */

/**
 * @{
 * Construct a constant Vec3Dual
 * val = (p0.x, p0.y, p0.z)
 * dx = (0, 0, 0)
 * dy = (0, 0, 0)
 * dz = (0, 0, 0)
 */
MATH_DEFINE_UNARY_VARIFORM(Vec3Dual_ctor, Vec3Dual, Vec3f,
                           { result = Vec3Dual3f_ctor(Dual_ctor(p0.x),
                                                      Dual_ctor(p0.y),
                                                      Dual_ctor(p0.z)); })
/** @} */

/**
 * @{
 * Construct a seeded Vec3Dual
 * val = (p0.x, p0.y, p0.z)
 * dx = (p1.x, p1.y, p1.z)
 * dy = (p2.x, p2.y, p2.z)
 * dz = (p3.x, p3.y, p3.z)
 */
MATH_DEFINE_QUATERNION_VARIFORM(Vec3Dual_ctor, Vec3Dual, Vec3f, Vec3f, Vec3f, Vec3f,
                                { result = Vec3Dual3f_ctor(Dual_ctor(p0.x, p1.x, p2.x, p3.x),
                                                           Dual_ctor(p0.y, p1.y, p2.y, p3.y),
                                                           Dual_ctor(p0.z, p1.z, p2.z, p3.z)); })
/** @} */

/**
 * @{
 * Evaluate a Vec3Dual as a Vec3f
 */
MATH_DEFINE_UNARY_VARIFORM(eval, Vec3f, Vec3Dual,
                           { return Vec3f_ctor(eval(p0.x), eval(p0.y), eval(p0.z)); })
/** @} */

/**
 * @{
 * Evaluate dx of a Vec3Dual as a Vec3f
 */
MATH_DEFINE_UNARY_VARIFORM(dDx, Vec3f, Vec3Dual,
                           { return Vec3f_ctor(dDx(p0.x), dDx(p0.y), dDx(p0.z)); })
/** @} */

/**
 * @{
 * Evaluate dy of a Vec3Dual as a Vec3f
 */
MATH_DEFINE_UNARY_VARIFORM(dDy, Vec3f, Vec3Dual,
                           { return Vec3f_ctor(dDy(p0.x), dDy(p0.y), dDy(p0.z)); })
/** @} */

/**
 * @{
 * Evaluate dz of a Vec3Dual as a Vec3f
 */
MATH_DEFINE_UNARY_VARIFORM(dDz, Vec3f, Vec3Dual,
                           { return Vec3f_ctor(dDz(p0.x), dDz(p0.y), dDz(p0.z)); })
/** @} */

//----------------------------------------------------------------------
// "Vec2Dual3f" is our standard vec2 type
//----------------------------------------------------------------------
/// @struct Vec2Dual
/// @brief alias of a Vec2Dual3f
typedef Vec2Dual3f Vec2Dual;

/**
 * @{
 * Construct a seeded Vec2Dual
 * val = (eval(p0), eval(p0))
 * dx = (dDx(p0), dDx(p0))
 * dy = (dDy(p0), dDy(p0))
 * dz = (dDz(p0), dDz(p0))
 */
MATH_DEFINE_UNARY_VARIFORM(Vec2Dual_ctor, Vec2Dual, Dual,
                           { result = Vec2Dual3f_ctor(p0); })
/** @} */

/**
 * @{
 * Construct a seeded Vec2Dual
 * val = (eval(p0), eval(p1))
 * dx = (dDx(p0), dDx(p1))
 * dy = (dDy(p0), dDy(p1))
 * dz = (dDz(p0), dDz(p1))
 */
MATH_DEFINE_BINARY_VARIFORM(Vec2Dual_ctor, Vec2Dual, Dual, Dual,
                            { result = Vec2Dual3f_ctor(p0, p1); })
/** @} */

/**
 * @{
 * Construct a constant Vec2Dual
 * val = (p0.x, p0.y)
 * dx = (0, 0)
 * dy = (0, 0)
 * dz = (0, 0)
 */
MATH_DEFINE_UNARY_VARIFORM(Vec2Dual_ctor, Vec2Dual, Vec2f,
                           { result = Vec2Dual3f_ctor(Dual_ctor(p0.x),
                                                      Dual_ctor(p0.y)); })
/** @} */

/**
 * @{
 * Construct a seeded Vec2Dual
 * val = (p0.x, p0.y)
 * dx = (p1.x, p1.y)
 * dy = (p2.x, p2.y)
 * dz = (p3.x, p3.y)
 */
MATH_DEFINE_QUATERNION_VARIFORM(Vec2Dual_ctor, Vec2Dual, Vec2f, Vec2f, Vec2f, Vec2f,
                                { result = Vec2Dual3f_ctor(Dual_ctor(p0.x, p1.x, p2.x, p3.x),
                                                           Dual_ctor(p0.y, p1.y, p2.y, p3.y)); })
/** @} */

/**
 * @{
 * Evaluate a Vec2Dual as a Vec2f
 */
MATH_DEFINE_UNARY_VARIFORM(eval, Vec2f, Vec2Dual,
                           { return Vec2f_ctor(eval(p0.x), eval(p0.y)); })
/** @} */

/**
 * @{
 * Evaluate dx of a Vec2Dual as a Vec2f
 */
MATH_DEFINE_UNARY_VARIFORM(dDx, Vec2f, Vec2Dual,
                           { return Vec2f_ctor(dDx(p0.x), dDx(p0.y)); })
/** @} */

/**
 * @{
 * Evaluate dy of a Vec2Dual as a Vec2f
 */
MATH_DEFINE_UNARY_VARIFORM(dDy, Vec2f, Vec2Dual,
                           { return Vec2f_ctor(dDy(p0.x), dDy(p0.y)); })
/** @} */

/**
 * @{
 * Evaluate dz of a Vec2Dual as a Vec2f
 */
MATH_DEFINE_UNARY_VARIFORM(dDz, Vec2f, Vec2Dual,
                           { return Vec2f_ctor(dDz(p0.x), dDz(p0.y)); })
/** @} */

