// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file Vec4.isph
/// @brief
/// defines a 4 component x, y, z, w vector and its methods
#pragma once

#include "Constants.isph"
#include "Math.isph"
#include "Variform.isph"

//---------------------------------------------------------------------
// Types
//---------------------------------------------------------------------

// Vec4f;
#define MATH_DECLARE_VEC4(TYPE, NAME)           \
    struct NAME                                 \
    {                                           \
        TYPE x;                                 \
        TYPE y;                                 \
        TYPE z;                                 \
        TYPE w;                                 \
    };
/// @struct Vec4f
/// @brief a 4 component, single precision, x-y-z-w vector
MATH_DECLARE_VEC4(float, Vec4f);

// ---------------------------------------------------------------------------
// Construction
// ---------------------------------------------------------------------------

// Vec4f = Vec4f_ctor(float);
/** \cond */
#define MATH_VEC4_CTOR_1()                      \
    {                                           \
        result.x = p0;                          \
        result.y = p0;                          \
        result.z = p0;                          \
        result.w = p0;                          \
    }
/** \endcond */
/// @{
/// construct a Vec4 from a single number
MATH_DEFINE_UNARY_VARIFORM(Vec4f_ctor, Vec4f, float, MATH_VEC4_CTOR_1())
/// @}

// Vec4f = Vec4f_ctor(float, float, float, float);
/** \cond */
#define MATH_VEC4_CTOR_4()                      \
    {                                           \
        result.x = p0;                          \
        result.y = p1;                          \
        result.z = p2;                          \
        result.w = p3;                          \
    }
/** \endcond */
/// @{
/// construct a Vec4 from 4 numbers
MATH_DEFINE_QUATERNION_VARIFORM(Vec4f_ctor, Vec4f, float, float, float, float, MATH_VEC4_CTOR_4())
/// @}

// Vec4f = Vec4f_ctor(float * uniform);
/** \cond */
#define MATH_VEC4_CTOR_ARRAY()                  \
    {                                           \
        result.x = p0[0];                       \
        result.y = p0[1];                       \
        result.z = p0[2];                       \
        result.w = p0[3];                       \
    }
/** \endcond */
/// @{
/// construct a Vec4 from an array
MATH_DEFINE_UNARY_ARRAY_VARIFORM(Vec4f_ctor, Vec4f, float, MATH_VEC4_CTOR_ARRAY())
/// @}

// ---------------------------------------------------------------------------
// Binary Operators
// ---------------------------------------------------------------------------

// Vec4f = Vec4f + Vec4f;
/** \cond */
#define MATH_VEC4_PLUS()                        \
    {                                           \
        result.x = p0.x + p1.x;                 \
        result.y = p0.y + p1.y;                 \
        result.z = p0.z + p1.z;                 \
        result.w = p0.w + p1.w;                 \
    }
/** \endcond */
/// @{
/// component-wise add of 2 Vec4, p0 + p1
MATH_DEFINE_BINARY_VARIFORM(operator+, Vec4f, Vec4f, Vec4f, MATH_VEC4_PLUS())
/// @}

//  Vec4f = Vec4f - Vec4f;
/** \cond */
#define MATH_VEC4_MINUS()                       \
    {                                           \
        result.x = p0.x - p1.x;                 \
        result.y = p0.y - p1.y;                 \
        result.z = p0.z - p1.z;                 \
        result.w = p0.w - p1.w;                 \
    }
/** \endcond */
/// @{
/// component-wise subtraction of 2 Vec4, p0 - p1
MATH_DEFINE_BINARY_VARIFORM(operator-, Vec4f, Vec4f, Vec4f, MATH_VEC4_MINUS())
/// @}

// Vec4f = float * Vec4f;
/** \cond */
#define MATH_VEC4_S_PRE_MULT()                  \
    {                                           \
        result.x = p0 * p1.x;                   \
        result.y = p0 * p1.y;                   \
        result.z = p0 * p1.z;                   \
        result.w = p0 * p1.w;                   \
    }
/** \endcond */
/// @{
/// scalar multiplication, p0 * p1
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec4f, float, Vec4f, MATH_VEC4_S_PRE_MULT())
/// @}

// Vec4f = Vec4f * float;
/** \cond */
#define MATH_VEC4_S_POST_MULT()                 \
    {                                           \
        result.x = p0.x * p1;                   \
        result.y = p0.y * p1;                   \
        result.z = p0.z * p1;                   \
        result.w = p0.w * p1;                   \
    }
/** \endcond */
/// @{
/// scalar post-multiplication, p0 * p1
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec4f, Vec4f, float, MATH_VEC4_S_POST_MULT())
/// @}

// Vec4f = Vec4f * Vec4f;
/** \cond */
#define MATH_VEC4_MULT()                        \
    {                                           \
        result.x = p0.x * p1.x;                 \
        result.y = p0.y * p1.y;                 \
        result.z = p0.z * p1.z;                 \
        result.w = p0.w * p1.w;                 \
    }
/** \endcond */
/// @{
/// component-wise multiplication of 2 Vec4, p0 * p1
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec4f, Vec4f, Vec4f, MATH_VEC4_MULT())
/// @}

// Vec4f = float / Vec4f;
/** \cond */
#define MATH_VEC4_S_PRE_DIV()                   \
    {                                           \
        result.x = p0 / p1.x;                   \
        result.y = p0 / p1.y;                   \
        result.z = p0 / p1.z;                   \
        result.w = p0 / p1.w;                   \
    }
/** \endcond */
/// @{
/// scalar pre-division, p0 / p1
MATH_DEFINE_BINARY_VARIFORM(operator/, Vec4f, float, Vec4f, MATH_VEC4_S_PRE_DIV())
/// @}

// Vec4f = Vec4f / float;
/** \cond */
#define MATH_VEC4_S_POST_DIV()                  \
    {                                           \
        result.x = p0.x / p1;                   \
        result.y = p0.y / p1;                   \
        result.z = p0.z / p1;                   \
        result.w = p0.w / p1;                   \
    }
/** \endcond */
/// @{
/// scalar division p0 / p1
MATH_DEFINE_BINARY_VARIFORM(operator/, Vec4f, Vec4f, float, MATH_VEC4_S_POST_DIV())
/// @}

// Vec4f = Vec4f / Vec4f;
/** \cond */
#define MATH_VEC4_DIV()                         \
    {                                           \
        result.x = p0.x / p1.x;                 \
        result.y = p0.y / p1.y;                 \
        result.z = p0.z / p1.z;                 \
        result.w = p0.w / p1.w;                 \
    }
/** \endcond */
/// @{
/// component-wise division of 2 Vec4, p0 / p1
MATH_DEFINE_BINARY_VARIFORM(operator/, Vec4f, Vec4f, Vec4f, MATH_VEC4_DIV())
/// @}

//  bool = isEqual(Vec4f, Vec4f, float)
/** \cond */
#define MATH_VEC4_IS_EQUAL()                    \
    {                                           \
        result = isEqual(p0.x, p1.x, p2) &&     \
            isEqual(p0.y, p1.y, p2) &&          \
            isEqual(p0.z, p1.z, p2) &&          \
            isEqual(p0.w, p1.w, p2);            \
    }
/** \endcond */
/// @{
/// are two Vec4s (p0, p1) equal to within tolerance (p2)
MATH_DEFINE_TERNARY_VARIFORM(isEqual, bool, Vec4f, Vec4f, float, MATH_VEC4_IS_EQUAL())
/// @}

// bool isEqual(Vec4f, Vec4f)
/// @{
/// are two Vec4s equal to within the default tolerance (sEpsilon)?
MATH_DEFINE_BINARY_VARIFORM(isEqual, bool, Vec4f, Vec4f,
                            { result = isEqual(p0, p1, sEpsilon); })
/// @}

//  bool = isEqualFixedEps(Vec4f, Vec4f, float)
/** \cond */
#define MATH_VEC4_IS_EQUAL_FIXED_EPS()                  \
    {                                                   \
        result = isEqualFixedEps(p0.x, p1.x, p2) &&     \
            isEqualFixedEps(p0.y, p1.y, p2) &&          \
            isEqualFixedEps(p0.z, p1.z, p2) &&          \
            isEqualFixedEps(p0.w, p1.w, p2);            \
    }
/** \endcond */
/// @{
/// are two Vec4s (p0, p1) equal to within tolerance (p2)
MATH_DEFINE_TERNARY_VARIFORM(isEqualFixedEps, bool, Vec4f, Vec4f, float, MATH_VEC4_IS_EQUAL_FIXED_EPS())
/// @}

// bool isEqualFixedEps(Vec4f, Vec4f)
/// @{
/// are two Vec4s equal to within the default tolerance (sEpsilon)?
MATH_DEFINE_BINARY_VARIFORM(isEqualFixedEps, bool, Vec4f, Vec4f,
                            { result = isEqualFixedEps(p0, p1, sEpsilon); })
/// @}

// bool = isZero(Vec4f, tol)
/** \cond */
#define MATH_VEC4_IS_ZERO()                                     \
    {                                                           \
        result = isZero(p0.x, p1) && isZero(p0.y, p1) &&        \
            isZero(p0.z, p1) && isZero(p0.w, p1);               \
    }
/** \endcond */
/// @{
/// is a Vec4 equal to zero within a tolerance (p2) ?
MATH_DEFINE_BINARY_VARIFORM(isZero, bool, Vec4f, float, MATH_VEC4_IS_ZERO())
/// @}

// bool = isZero(Vec4f);
/// @{
/// is a Vec4 equal to zero within the default tolerance (sEpsilon)?
MATH_DEFINE_UNARY_VARIFORM(isZero, bool, Vec4f,
                           { result = isZero(p0, sEpsilon); })
/// @}

// float = dot(Vec4f, Vec4f)
/** \cond */
#define MATH_VEC4_DOT()                                                 \
    {                                                                   \
        result = p0.x * p1.x + p0.y * p1.y + p0.z * p1.z + p0.w * p1.w; \
    }
/** \endcond */
/// @{
/// compute the dot product of 2 Vec4
MATH_DEFINE_BINARY_VARIFORM(dot, float, Vec4f, Vec4f, MATH_VEC4_DOT())
/// @}

//----------------------------------------------------------------------
// unary operations
//----------------------------------------------------------------------

// float = length(Vec4f);
/** \cond */
#define MATH_VEC4_LENGTH()                                      \
    {                                                           \
        result = sqrt(p0.x * p0.x + p0.y * p0.y + p0.z * p0.z + \
                      p0.w * p0.w);                             \
    }
/** \endcond */
/// @{
/// compute the length of a Vec4
MATH_DEFINE_UNARY_VARIFORM(length, float, Vec4f, MATH_VEC4_LENGTH())
/// @}

//  float = lengthSqr(Vec4f);
/** \cond */
#define MATH_VEC4_LENGTH_SQR()                                          \
    {                                                                   \
        result = p0.x * p0.x + p0.y * p0.y + p0.z * p0.z + p0.w * p0.w; \
    }
/** \endcond */
/// @{
/// compute the length^2 of a Vec4
MATH_DEFINE_UNARY_VARIFORM(lengthSqr, float, Vec4f, MATH_VEC4_LENGTH_SQR())
/// @}

// Vec4f = normalize(Vec4f)
/** \cond */
#define MATH_VEC4_NORMALIZE()                   \
    {                                           \
        result = p0 * rcp(length(p0));          \
    }
/** \endcond */
/// @{
/// compute a normalized Vec4
MATH_DEFINE_UNARY_VARIFORM(normalize, Vec4f, Vec4f, MATH_VEC4_NORMALIZE())
/// @}

// Vec4f = abs(Vec4f)
/** \cond */
#define MATH_VEC4_ABS()                         \
    {                                           \
        result.x = abs(p0.x);                   \
        result.y = abs(p0.y);                   \
        result.z = abs(p0.z);                   \
        result.w = abs(p0.w);                   \
    }
/** \endcond */
/// @{
/// compute absolute value of a Vec4
MATH_DEFINE_UNARY_VARIFORM(abs, Vec4f, Vec4f, MATH_VEC4_ABS())
/// @}

// Vec4f = neg(Vec4f)
/** \cond */
#define MATH_VEC4_NEG()                         \
    {                                           \
        result = -1.0 * p0;                     \
    }
/** \endcond */
/// @{
/// compute negative value of a Vec2
MATH_DEFINE_UNARY_VARIFORM(neg, Vec4f, Vec4f, MATH_VEC4_NEG())
/// @}

// Vec4f = rcp([MATH_]Vec4f)
/** \cond */
#define MATH_VEC4_RCP()                         \
    {                                           \
        result.x = rcp(p0.x);                   \
        result.y = rcp(p0.y);                   \
        result.z = rcp(p0.z);                   \
        result.w = rcp(p0.w);                   \
    }
/** \endcond */
/// @{
/// compute the reciprocal of a Vec4
MATH_DEFINE_UNARY_VARIFORM(rcp, Vec4f, Vec4f, MATH_VEC4_RCP())
/// @}

// bool = isNormalized(Vec4f)
/** \cond */
#define MATH_VEC4_IS_NORMALIZED()                       \
    {                                                   \
        result = isNormalizedLengthSqr(lengthSqr(p0));  \
    }
/** \endcond */
/// @{
/// is a Vec4 normalized?
MATH_DEFINE_UNARY_VARIFORM(isNormalized, bool, Vec4f, MATH_VEC4_IS_NORMALIZED())
/// @}

// ---------------------------------------------------------------------------
// Ternary Operations
// ---------------------------------------------------------------------------

// Vec4f = lerp(Vec4f, Vec4f, float)
/// @{
/// lerp two Vec4f (p0, p1) by a value (p2)
MATH_DEFINE_TERNARY_VARIFORM(lerp, Vec4f, Vec4f, Vec4f, float, MATH_LERP())
/// @}

