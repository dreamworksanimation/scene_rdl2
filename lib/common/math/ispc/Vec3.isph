// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file Vec3.isph
/// @brief
/// defines a 3 component x, y, z vector and its methods
#pragma once

#include "Constants.isph"
#include "Dual.isph"
#include "Math.isph"
#include "Variform.isph"

//---------------------------------------------------------------------
// Types
//---------------------------------------------------------------------

// Vec3f;
#define MATH_DECLARE_VEC3(TYPE, NAME)           \
    struct NAME                                 \
    {                                           \
        TYPE x;                                 \
        TYPE y;                                 \
        TYPE z;                                 \
    };
/// @struct Vec3f
/// @brief a 3 component, single precision, x-y-z vector
MATH_DECLARE_VEC3(float, Vec3f);
/// @struct Vec3Dual3f
/// @brief a 3 component, single precision dual3, x-y-z vector
MATH_DECLARE_VEC3(Dual3f, Vec3Dual3f);

// ---------------------------------------------------------------------------
// Construction
// ---------------------------------------------------------------------------

// Vec3f = Vec3f_ctor(float);
// Vec3Dual3f = Vec3Dual3f_ctor(Dual3f);
/** \cond */
#define MATH_VEC3_CTOR_1()                      \
    {                                           \
        result.x = p0;                          \
        result.y = p0;                          \
        result.z = p0;                          \
    }
/** \endcond */
/// @{
/// Construct a Vec3 from a single number
MATH_DEFINE_UNARY_VARIFORM(Vec3f_ctor, Vec3f, float, MATH_VEC3_CTOR_1())
MATH_DEFINE_UNARY_VARIFORM(Vec3Dual3f_ctor, Vec3Dual3f, Dual3f, MATH_VEC3_CTOR_1())
/// @}

// Vec3f = Vec3f_ctor(float, float, float);
// Vec3Dual3f = Vec3Dual3f_ctor(Dual3f, Dual3f, Dual3f);
/** \cond */
#define MATH_VEC3_CTOR_3()                      \
    {                                           \
        result.x = p0;                          \
        result.y = p1;                          \
        result.z = p2;                          \
    }
/** \endcond */
/// @{
/// construct a Vec3 from 3 numbers
MATH_DEFINE_TERNARY_VARIFORM(Vec3f_ctor, Vec3f, float, float, float, MATH_VEC3_CTOR_3())
MATH_DEFINE_TERNARY_VARIFORM(Vec3Dual3f_ctor, Vec3Dual3f, Dual3f, Dual3f, Dual3f,
                             MATH_VEC3_CTOR_3())
/// @}

// Vec3f = Vec3f_ctor(float * uniform);
// Vec3Dual3f = Vec3Dual3f_ctor(Dual3f * uniform);
/** \cond */
#define MATH_VEC3_CTOR_ARRAY()                  \
    {                                           \
        result.x = p0[0];                       \
        result.y = p0[1];                       \
        result.z = p0[2];                       \
    }
/** \endcond */
/// @{
/// construct a Vec3 from an array
MATH_DEFINE_UNARY_ARRAY_VARIFORM(Vec3f_ctor, Vec3f, float, MATH_VEC3_CTOR_ARRAY())
MATH_DEFINE_UNARY_ARRAY_VARIFORM(Vec3Dual3f_ctor, Vec3Dual3f, Dual3f, MATH_VEC3_CTOR_ARRAY())
/// @}

// ---------------------------------------------------------------------------
// Binary Operators
// ---------------------------------------------------------------------------

//    Vec3f = Vec3f + Vec3f;
//    Vec3Dual3f = Vec3Dual3f + Vec3Dual3f;
/** \cond */
#define MATH_VEC3_PLUS()                        \
    {                                           \
        result.x = p0.x + p1.x;                 \
        result.y = p0.y + p1.y;                 \
        result.z = p0.z + p1.z;                 \
    }
/** \endcond */
/// @{
/// component-wise add of 2 Vec3, p0 + p1
MATH_DEFINE_BINARY_VARIFORM(operator+, Vec3f, Vec3f, Vec3f, MATH_VEC3_PLUS())
MATH_DEFINE_BINARY_VARIFORM(operator+, Vec3Dual3f, Vec3Dual3f, Vec3Dual3f, MATH_VEC3_PLUS())
MATH_DEFINE_BINARY_VARIFORM(operator+, Vec3Dual3f, Vec3f, Vec3Dual3f, MATH_VEC3_PLUS())
MATH_DEFINE_BINARY_VARIFORM(operator+, Vec3Dual3f, Vec3Dual3f, Vec3f, MATH_VEC3_PLUS())
/// @}

// Vec3f = Vec3f - Vec3f;
// Vec3Dual3f = Vec3Dual3f - Vec3Dual3f;
/** \cond */
#define MATH_VEC3_MINUS()                       \
    {                                           \
        result.x = p0.x - p1.x;                 \
        result.y = p0.y - p1.y;                 \
        result.z = p0.z - p1.z;                 \
    }
/** \endcond */
/// @{
/// component-wise subtraction of 2 Vec3, p0 - p1
MATH_DEFINE_BINARY_VARIFORM(operator-, Vec3f, Vec3f, Vec3f, MATH_VEC3_MINUS())
MATH_DEFINE_BINARY_VARIFORM(operator-, Vec3Dual3f, Vec3Dual3f, Vec3Dual3f, MATH_VEC3_MINUS())
MATH_DEFINE_BINARY_VARIFORM(operator-, Vec3Dual3f, Vec3f, Vec3Dual3f, MATH_VEC3_MINUS())
MATH_DEFINE_BINARY_VARIFORM(operator-, Vec3Dual3f, Vec3Dual3f, Vec3f, MATH_VEC3_MINUS())
/// @}

// Vec3f = float * Vec3f;
// Vec3Dual3f = [float|Dual3f] * Vec3Dual3f;
/** \cond */
#define MATH_VEC3_S_PRE_MULT()                  \
    {                                           \
        result.x = p0 * p1.x;                   \
        result.y = p0 * p1.y;                   \
        result.z = p0 * p1.z;                   \
    }
/** \endcond */
/// @{
/// scalar multiplication, p0 * p1
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec3f, float, Vec3f, MATH_VEC3_S_PRE_MULT())
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec3Dual3f, Dual3f, Vec3f, MATH_VEC3_S_PRE_MULT())
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec3Dual3f, Dual3f, Vec3Dual3f, MATH_VEC3_S_PRE_MULT())
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec3Dual3f, float, Vec3Dual3f, { result = Dual3f_ctor(p0) * p1; })
/// @}

// Vec3f = Vec3f * float;
// Vec3Dual3f = Vec3Dual3f * Dual3f;
/** \cond */
#define MATH_VEC3_S_POST_MULT()                 \
    {                                           \
        result.x = p0.x * p1;                   \
        result.y = p0.y * p1;                   \
        result.z = p0.z * p1;                   \
    }
/** \endcond */
/// @{
/// scalar multiplication, p0 * p1
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec3f, Vec3f, float, MATH_VEC3_S_POST_MULT())
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec3Dual3f, Vec3Dual3f, Dual3f, MATH_VEC3_S_POST_MULT())
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec3Dual3f, Vec3Dual3f, float, { result = p0 * Dual3f_ctor(p1); })
/// @}

// Vec3f = Vec3f * Vec3f;
// Vec3Dual3f = Vec3Dual3f * Vec3Dual3f;
/** \cond */
#define MATH_VEC3_MULT()                        \
    {                                           \
        result.x = p0.x * p1.x;                 \
        result.y = p0.y * p1.y;                 \
        result.z = p0.z * p1.z;                 \
    }
/** \endcond */
/// @{
/// component-wise multiplication of 2 Vec3, p0 * p1
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec3f, Vec3f, Vec3f, MATH_VEC3_MULT())
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec3Dual3f, Vec3Dual3f, Vec3Dual3f, MATH_VEC3_MULT())
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec3Dual3f, Vec3f, Vec3Dual3f, MATH_VEC3_MULT())
MATH_DEFINE_BINARY_VARIFORM(operator*, Vec3Dual3f, Vec3Dual3f, Vec3f, MATH_VEC3_MULT())
/// @}

// Vec3f = float / Vec3f;
// Vec3Dual3f = Dual3f / Vec3Dual3f;
/** \cond */
#define MATH_VEC3_S_PRE_DIV()                   \
    {                                           \
        result.x = p0 / p1.x;                   \
        result.y = p0 / p1.y;                   \
        result.z = p0 / p1.z;                   \
    }
/** \endcond */
/// @{
/// scalar division, p0 / p1
MATH_DEFINE_BINARY_VARIFORM(operator/, Vec3f, float, Vec3f, MATH_VEC3_S_PRE_DIV())
MATH_DEFINE_BINARY_VARIFORM(operator/, Vec3Dual3f, Dual3f, Vec3Dual3f, MATH_VEC3_S_PRE_DIV())
/// @}

// Vec3f = Vec3f / float;
// Vec3Dual3f = Vec3Dual3f / Dual3f;
/** \cond */
#define MATH_VEC3_S_POST_DIV()                  \
    {                                           \
        result.x = p0.x / p1;                   \
        result.y = p0.y / p1;                   \
        result.z = p0.z / p1;                   \
    }
/** \endcond */
/// @{
/// scalar division p0 / p1
MATH_DEFINE_BINARY_VARIFORM(operator/, Vec3f, Vec3f, float, MATH_VEC3_S_POST_DIV())
MATH_DEFINE_BINARY_VARIFORM(operator/, Vec3Dual3f, Vec3Dual3f, Dual3f, MATH_VEC3_S_POST_DIV())
/// @}

// Vec3f = Vec3f / Vec3f;
// Vec3Dual3f = Vec3Dual3f / Vec3Dual3f;
/** \cond */
#define MATH_VEC3_DIV()                         \
    {                                           \
        result.x = p0.x / p1.x;                 \
        result.y = p0.y / p1.y;                 \
        result.z = p0.z / p1.z;                 \
    }
/** \endcond */
/// @{
/// component-wise division of 2 Vec3, p0 / p1
MATH_DEFINE_BINARY_VARIFORM(operator/, Vec3f, Vec3f, Vec3f, MATH_VEC3_DIV())
MATH_DEFINE_BINARY_VARIFORM(operator/, Vec3Dual3f, Vec3Dual3f, Vec3Dual3f, MATH_VEC3_DIV())
MATH_DEFINE_BINARY_VARIFORM(operator/, Vec3Dual3f, Vec3f, Vec3Dual3f, MATH_VEC3_DIV())
MATH_DEFINE_BINARY_VARIFORM(operator/, Vec3Dual3f, Vec3Dual3f, Vec3f, MATH_VEC3_DIV())
/// @}

// bool isEqual(Vec3f, Vec3f, float)
// bool isEqual(Vec3Dual3f, Vec3Dual3f, float)
/** \cond */
#define MATH_VEC3_IS_EQUAL()                    \
    {                                           \
        result = isEqual(p0.x, p1.x, p2) &&     \
            isEqual(p0.y, p1.y, p2) &&          \
            isEqual(p0.z, p1.z, p2);            \
    }
/** \endcond */
/// @{
/// are two Vec3s (p0, p1) equal to within tolerance (p2)?
MATH_DEFINE_TERNARY_VARIFORM(isEqual, bool, Vec3f, Vec3f, float, MATH_VEC3_IS_EQUAL())
MATH_DEFINE_TERNARY_VARIFORM(isEqual, bool, Vec3Dual3f, Vec3Dual3f, float, MATH_VEC3_IS_EQUAL())
/// @}

// bool isEqual(Vec3f, Vec3f)
// bool isEqual(Vec3Dual3f, Vec3Dual3f)
/// @{
/// are two Vec3s equal to within the default tolerance (sEpsilon)?
MATH_DEFINE_BINARY_VARIFORM(isEqual, bool, Vec3f, Vec3f,
                            { result = isEqual(p0, p1, sEpsilon); })
MATH_DEFINE_BINARY_VARIFORM(isEqual, bool, Vec3Dual3f, Vec3Dual3f,
                            { result = isEqual(p0, p1, sEpsilon); })
/// @}

// bool isEqualFixedEps(Vec3f, Vec3f, float)
// bool isEqualFixedEps(Vec3Dual3f, Vec3Dual3f, float)
/** \cond */
#define MATH_VEC3_IS_EQUAL_FIXED_EPS()                  \
    {                                                   \
        result = isEqualFixedEps(p0.x, p1.x, p2) &&     \
            isEqualFixedEps(p0.y, p1.y, p2) &&          \
            isEqualFixedEps(p0.z, p1.z, p2);            \
    }
/** \endcond */
/// @{
/// are two Vec3s (p0, p1) equal to within tolerance (p2)?
MATH_DEFINE_TERNARY_VARIFORM(isEqualFixedEps, bool, Vec3f, Vec3f, float, MATH_VEC3_IS_EQUAL_FIXED_EPS())
MATH_DEFINE_TERNARY_VARIFORM(isEqualFixedEps, bool, Vec3Dual3f, Vec3Dual3f, float, MATH_VEC3_IS_EQUAL_FIXED_EPS())
/// @}

// bool isEqualFixedEps(Vec3f, Vec3f)
// bool isEqualFixedEps(Vec3Dual3f, Vec3Dual3f)
/// @{
/// are two Vec3s equal to within the default tolerance (sEpsilon)?
MATH_DEFINE_BINARY_VARIFORM(isEqualFixedEps, bool, Vec3f, Vec3f,
                            { result = isEqualFixedEps(p0, p1, sEpsilon); })
MATH_DEFINE_BINARY_VARIFORM(isEqualFixedEps, bool, Vec3Dual3f, Vec3Dual3f,
                            { result = isEqualFixedEps(p0, p1, sEpsilon); })
/// @}

// bool = isZero(Vec3f, tol)
// bool = isZero(Vec3Dual3f, float)
/** \cond */
#define MATH_VEC3_IS_ZERO()                                             \
    {                                                                   \
        result = isZero(p0.x, p1) && isZero(p0.y, p1) && isZero(p0.z, p1); \
    }
/** \endcond */
/// @{
/// is a Vec3 equal to zero within a tolerance (p2) ?
MATH_DEFINE_BINARY_VARIFORM(isZero, bool, Vec3f, float, MATH_VEC3_IS_ZERO())
MATH_DEFINE_BINARY_VARIFORM(isZero, bool, Vec3Dual3f, float, MATH_VEC3_IS_ZERO())
/// @}

// bool = isZero(Vec3f);
// bool = isZero(Vec3Dual3f);
/// @{
/// is a Vec3 equal to zero within the default tolerance (sEpsilon)?
MATH_DEFINE_UNARY_VARIFORM(isZero, bool, Vec3f,
                           { result = isZero(p0, sEpsilon); })
MATH_DEFINE_UNARY_VARIFORM(isZero, bool, Vec3Dual3f,
                           { result = isZero(p0, sEpsilon); })
/// @}

// float = dot(Vec3f, Vec3f)
// Dual3f = dot(Vec3Dual3f, Vec3Dual3f)
/** \cond */
#define MATH_VEC3_DOT()                                         \
    {                                                           \
        result = p0.x * p1.x + p0.y * p1.y + p0.z * p1.z;       \
    }
/** \endcond */
/// @{
/// compute the dot product of 2 Vec3
MATH_DEFINE_BINARY_VARIFORM(dot, float, Vec3f, Vec3f, MATH_VEC3_DOT())
MATH_DEFINE_BINARY_VARIFORM(dot, Dual3f, Vec3Dual3f, Vec3Dual3f, MATH_VEC3_DOT())
MATH_DEFINE_BINARY_VARIFORM(dot, Dual3f, Vec3f, Vec3Dual3f, MATH_VEC3_DOT())
MATH_DEFINE_BINARY_VARIFORM(dot, Dual3f, Vec3Dual3f, Vec3f, MATH_VEC3_DOT())

/// @}

// Vec3f = cross(Vec3f, Vec3f)
// Vec3Dual3f = cross(Vec3Dual3f, Vec3Dual3f)
/** \cond */
#define MATH_VEC3_CROSS()                       \
    {                                           \
        result.x = p0.y * p1.z - p0.z * p1.y;   \
        result.y = p0.z * p1.x - p0.x * p1.z;   \
        result.z = p0.x * p1.y - p0.y * p1.x;   \
    }
/** \endcond */
/// @{
/// compute the cross product of 2 Vec3
MATH_DEFINE_BINARY_VARIFORM(cross, Vec3f, Vec3f, Vec3f, MATH_VEC3_CROSS())
MATH_DEFINE_BINARY_VARIFORM(cross, Vec3Dual3f, Vec3Dual3f, Vec3Dual3f, MATH_VEC3_CROSS())
/// @}

// Vec3f = max(Vec3f, Vec3f)
/** \cond */
#define MATH_VEC3_MAX()                \
    {                                  \
        result.x = max(p0.x, p1.x);    \
        result.y = max(p0.y, p1.y);    \
        result.z = max(p0.z, p1.z);    \
    }
/** \endcond */
/// @{
/// compute the element-wise max of 2 Vec3
MATH_DEFINE_BINARY_VARIFORM(max, Vec3f, Vec3f, Vec3f, MATH_VEC3_MAX())
/// @}

//----------------------------------------------------------------------
// unary operations
//----------------------------------------------------------------------

// float = length(Vec3f);
// Dual3f = length(Vec3Dual3f);
/** \cond */
#define MATH_VEC3_LENGTH()                                      \
    {                                                           \
        result = sqrt(p0.x * p0.x + p0.y * p0.y + p0.z * p0.z); \
    }
/** \endcond */
/// @{
/// compute the length of a Vec3
MATH_DEFINE_UNARY_VARIFORM(length, float, Vec3f, MATH_VEC3_LENGTH())
MATH_DEFINE_UNARY_VARIFORM(length, Dual3f, Vec3Dual3f, MATH_VEC3_LENGTH())
/// @}

// float = lengthSqr(Vec3f);
// Dual3f = lengthSqr(Vec3Dual3f);
/** \cond */
#define MATH_VEC3_LENGTH_SQR()                                  \
    {                                                           \
        result = p0.x * p0.x + p0.y * p0.y + p0.z * p0.z;       \
    }
/** \endcond */
/// @{
/// compute the length^2 of a Vec3
MATH_DEFINE_UNARY_VARIFORM(lengthSqr, float, Vec3f, MATH_VEC3_LENGTH_SQR())
MATH_DEFINE_UNARY_VARIFORM(lengthSqr, Dual3f, Vec3Dual3f, MATH_VEC3_LENGTH_SQR())
/// @}

// Vec3f = normalize(Vec3f)
// Vec3Dual3f = normalize(Vec3Dual3f)
/** \cond */
#define MATH_VEC3_NORMALIZE()                   \
    {                                           \
        result = p0 * rcp(length(p0));          \
    }
/** \endcond */
/// @{
/// compute a normalized Vec3
MATH_DEFINE_UNARY_VARIFORM(normalize, Vec3f, Vec3f, MATH_VEC3_NORMALIZE())
MATH_DEFINE_UNARY_VARIFORM(normalize, Vec3Dual3f, Vec3Dual3f, MATH_VEC3_NORMALIZE())
/// @}

// Vec3f = abs(Vec3f)
// Vec3Dual3f = abs(Vec3Dual3f)
/** \cond */
#define MATH_VEC3_ABS()                         \
    {                                           \
        result.x = abs(p0.x);                   \
        result.y = abs(p0.y);                   \
        result.z = abs(p0.z);                   \
    }
/** \endcond */
/// @{
/// compute absolute value of a Vec3
MATH_DEFINE_UNARY_VARIFORM(abs, Vec3f, Vec3f, MATH_VEC3_ABS())
MATH_DEFINE_UNARY_VARIFORM(abs, Vec3Dual3f, Vec3Dual3f, MATH_VEC3_ABS())
/// @}

// Vec3f = neg(Vec3f)
// Vec3Dual3f = neg(Vec3Dual3f)
/** \cond */
#define MATH_VEC3_NEG()                         \
    {                                           \
        result = -1.0 * p0;                     \
    }
/** \endcond */
/// @{
/// compute negative value of a Vec3
MATH_DEFINE_UNARY_VARIFORM(neg, Vec3f, Vec3f, MATH_VEC3_NEG())
MATH_DEFINE_UNARY_VARIFORM(neg, Vec3Dual3f, Vec3Dual3f, MATH_VEC3_NEG())
/// @}

// Vec3f = rcp(Vec3f)
/** \cond */
#define MATH_VEC3_RCP()                         \
    {                                           \
        result.x = rcp(p0.x);                   \
        result.y = rcp(p0.y);                   \
        result.z = rcp(p0.z);                   \
    }
/** \endcond */
/// @{
/// compute the reciprocal of a Vec3
MATH_DEFINE_UNARY_VARIFORM(rcp, Vec3f, Vec3f, MATH_VEC3_RCP())
MATH_DEFINE_UNARY_VARIFORM(rcp, Vec3Dual3f, Vec3Dual3f, MATH_VEC3_RCP())
/// @}

// bool = isNormalized(Vec3f)
// bool = isNormalized(Vec3Dual3f)
/** \cond */
#define MATH_VEC3_IS_NORMALIZED()                       \
    {                                                   \
        result = isNormalizedLengthSqr(lengthSqr(p0));  \
    }
#define MATH_VEC3DUAL_IS_NORMALIZED()                           \
    {                                                           \
        result = isNormalizedLengthSqr(eval(lengthSqr(p0))) ;   \
    }
/** \endcond */
/// @{
/// is a Vec3 normalized?
MATH_DEFINE_UNARY_VARIFORM(isNormalized, bool, Vec3f, MATH_VEC3_IS_NORMALIZED())
MATH_DEFINE_UNARY_VARIFORM(isNormalized, bool, Vec3Dual3f, MATH_VEC3DUAL_IS_NORMALIZED())
/// @}

// float = reduce_max(Vec3f);
/** \cond */
#define MATH_VEC3_REDUCE_MAX()                \
    {                                         \
        result = max(p0.x, max(p0.y, p0.z));  \
    }
/** \endcond */
/// @{
/// find the maximum element of a Vec3
MATH_DEFINE_UNARY_VARIFORM(reduce_max, float, Vec3f, MATH_VEC3_REDUCE_MAX())
/// @}

// ---------------------------------------------------------------------------
// Ternary Operations
// ---------------------------------------------------------------------------

// Vec3f = lerp(Vec3f, Vec3f, float)
// Vec3Dual3f = lerp(Vec3Dual3f, Vec3Dual3f, [float|Dual3f])
/// @{
/// lerp two Vec3 (p0, p1) by a value (p2)
MATH_DEFINE_TERNARY_VARIFORM(lerp, Vec3f, Vec3f, Vec3f, float, MATH_LERP())
MATH_DEFINE_TERNARY_VARIFORM(lerp, Vec3Dual3f, Vec3Dual3f, Vec3Dual3f, Dual3f, MATH_LERP())
MATH_DEFINE_TERNARY_VARIFORM(lerp, Vec3Dual3f, Vec3Dual3f, Vec3Dual3f, float,
                             { result = lerp(p0, p1, Dual3f_ctor(p2)); })
/// @}

