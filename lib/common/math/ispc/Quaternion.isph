// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file Quaternion.isph
/// @brief
/// defines a 4 component r, i, j, k Quaternion and its methods
#pragma once

#include "Constants.isph"
#include "Math.isph"
#include "Vec3.isph"

//--------------------------------------------------------------------------------------------------
// Types
//--------------------------------------------------------------------------------------------------

// TODO - call the members as w,x,y,z like the rest of the world does
struct Quaternion3f
{
    float r;
    float i;
    float j;
    float k;
};

//--------------------------------------------------------------------------------------------------
// Constructors
//--------------------------------------------------------------------------------------------------

// Quaternion3f = {w, x, y, z}
inline uniform Quaternion3f Quaternion3f_ctor(const uniform float w, const uniform float x,
                                              const uniform float y, const uniform float z)
{
    uniform Quaternion3f result;
    result.r = w;
    result.i = x;
    result.j = y;
    result.k = z;
    return result;
}

// Quaternion3f = {w, x, y, z}
inline varying Quaternion3f Quaternion3f_ctor(const varying float w, const varying float x,
                                              const varying float y, const varying float z)
{
    varying Quaternion3f result;
    result.r = w;
    result.i = x;
    result.j = y;
    result.k = z;
    return result;
}

// Quaternion3f = {f, 0, 0, 0}
inline uniform Quaternion3f Quaternion3f_ctor(const uniform float f)
{
    return Quaternion3f_ctor(f, 0.0f, 0.0f, 0.0f);
}

// Quaternion3f = {f, 0, 0, 0}
inline varying Quaternion3f Quaternion3f_ctor(const varying float f)
{
    return Quaternion3f_ctor(f, 0.0f, 0.0f, 0.0f);
}

// Quaternion3f = {0, v.x, v.y, v.z}
inline uniform Quaternion3f Quaternion3f_ctor(const uniform Vec3f v)
{
    return Quaternion3f_ctor(0.0f, v.x, v.y, v.z);
}

// Quaternion3f = {0, v.x, v.y, v.z}
inline varying Quaternion3f Quaternion3f_ctor(const varying Vec3f v)
{
    return Quaternion3f_ctor(0.0f, v.x, v.y, v.z);
}

// Quaternion3f Quaternion3f_ctor(axis, angle)
inline uniform Quaternion3f Quaternion3f_ctor(const uniform Vec3f axis, const uniform float angle)
{
    uniform float s, c;
    sincos(0.5f * angle, &s, &c);
    const uniform Vec3f a = s * normalize(axis);
    return Quaternion3f_ctor(c, a.x, a.y, a.z);
}

// Quaternion3f Quaternion3f_ctor(axis, angle)
inline varying Quaternion3f Quaternion3f_ctor(const varying Vec3f axis, const varying float angle)
{
    varying float s, c;
    sincos(0.5f * angle, &s, &c);
    const varying Vec3f a = s * normalize(axis);
    return Quaternion3f_ctor(c, a.x, a.y, a.z);
}

// Vec3f asVec3(Quaternion3f)
// Returns the rotation axis of the quaternion as a vector
inline uniform Vec3f asVec3(const uniform Quaternion3f q)
{
    return Vec3f_ctor(q.i, q.j, q.k);
}

// Vec3f asVec3(Quaternion3f)
// Returns the rotation axis of the quaternion as a vector
inline varying Vec3f asVec3(const varying Quaternion3f q)
{
    return Vec3f_ctor(q.i, q.j, q.k);
}

//--------------------------------------------------------------------------------------------------
// Conjugate
//--------------------------------------------------------------------------------------------------

// Quaternion3f conjugate(Quaternion3f)
inline uniform Quaternion3f conjugate(const uniform Quaternion3f q)
{
    return Quaternion3f_ctor(q.r, -q.i, -q.j, -q.k);
}

// Quaternion3f conjugate(Quaternion3f)
inline varying Quaternion3f conjugate(const varying Quaternion3f q)
{
    return Quaternion3f_ctor(q.r, -q.i, -q.j, -q.k);
}

//--------------------------------------------------------------------------------------------------
// Arithmetic
//--------------------------------------------------------------------------------------------------
 
// Quaternion3f = float + Quaternion3f
inline uniform Quaternion3f operator+(const uniform float f, const uniform Quaternion3f q)
{
    return Quaternion3f_ctor(f+q.r, q.i, q.j, q.k);
}

// Quaternion3f = float + Quaternion3f
inline varying Quaternion3f operator+(const varying float f, const varying Quaternion3f q)
{
    return Quaternion3f_ctor(f+q.r, q.i, q.j, q.k);
}

// Quaternion3f = Quaternion3f + float
inline uniform Quaternion3f operator+(const uniform Quaternion3f q, const uniform float f)
{
    return f + q;
}

// Quaternion3f = Quaternion3f + float
inline varying Quaternion3f operator+(const varying Quaternion3f q, const varying float f)
{
    return f + q;
}

// Quaternion3f = Quaternion3f + Quaternion3f
inline uniform Quaternion3f operator+(const uniform Quaternion3f q0, const uniform Quaternion3f q1)
{
    return Quaternion3f_ctor(q0.r+q1.r, q0.i+q1.i, q0.j+q1.j, q0.k+q1.k);
}

// Quaternion3f = Quaternion3f + Quaternion3f
inline varying Quaternion3f operator+(const varying Quaternion3f q0, const varying Quaternion3f q1)
{
    return Quaternion3f_ctor(q0.r+q1.r, q0.i+q1.i, q0.j+q1.j, q0.k+q1.k);
}

// Quaternion3f = float - Quaternion3f
inline uniform Quaternion3f operator-(const uniform float f, const uniform Quaternion3f q)
{
    return Quaternion3f_ctor(f-q.r, q.i, q.j, q.k);
}

// Quaternion3f = float - Quaternion3f
inline varying Quaternion3f operator-(const varying float f, const varying Quaternion3f q)
{
    return Quaternion3f_ctor(f-q.r, q.i, q.j, q.k);
}

// Quaternion3f = Quaternion3f - float
inline uniform Quaternion3f operator-(const uniform Quaternion3f q, const uniform float f)
{
    return Quaternion3f_ctor(q.r-f, q.i, q.j, q.k);
}

// Quaternion3f = Quaternion3f - float
inline varying Quaternion3f operator-(const varying Quaternion3f q, const varying float f)
{
    return Quaternion3f_ctor(q.r-f, q.i, q.j, q.k);
}

// Quaternion3f = Quaternion3f - Quaternion3f
inline uniform Quaternion3f operator-(const uniform Quaternion3f q0, const uniform Quaternion3f q1)
{
    return Quaternion3f_ctor(q0.r-q1.r, q0.i-q1.i, q0.j-q1.j, q0.k-q1.k);
}

// Quaternion3f = Quaternion3f - Quaternion3f
inline varying Quaternion3f operator-(const varying Quaternion3f q0, const varying Quaternion3f q1)
{
    return Quaternion3f_ctor(q0.r-q1.r, q0.i-q1.i, q0.j-q1.j, q0.k-q1.k);
}

// Quaternion3f = float * Quaternion3f
inline uniform Quaternion3f operator*(const uniform float f, const uniform Quaternion3f q)
{
    return Quaternion3f_ctor(f*q.r, f*q.i, f*q.j, f*q.k);
}

// Quaternion3f = float * Quaternion3f
inline varying Quaternion3f operator*(const varying float f, const varying Quaternion3f q)
{
    return Quaternion3f_ctor(f*q.r, f*q.i, f*q.j, f*q.k);
}

// Quaternion3f = Quaternion3f * float
inline uniform Quaternion3f operator*(const uniform Quaternion3f q, const uniform float f)
{
    return f * q;
}

// Quaternion3f = Quaternion3f * float
inline varying Quaternion3f operator*(const varying Quaternion3f q, const varying float f)
{
    return f * q;
}

// Quaternion3f = Quaternion3f * Quaternion3f
inline uniform Quaternion3f operator*(const uniform Quaternion3f q0, const uniform Quaternion3f q1)
{
    return Quaternion3f_ctor(q0.r*q1.r - q0.i*q1.i - q0.j*q1.j - q0.k*q1.k,
                             q0.r*q1.i + q0.i*q1.r + q0.j*q1.k - q0.k*q1.j,
                             q0.r*q1.j - q0.i*q1.k + q0.j*q1.r + q0.k*q1.i,
                             q0.r*q1.k + q0.i*q1.j - q0.j*q1.i + q0.k*q1.r);
}

// Quaternion3f = Quaternion3f * Quaternion3f
inline varying Quaternion3f operator*(const varying Quaternion3f q0, const varying Quaternion3f q1)
{
    return Quaternion3f_ctor(q0.r*q1.r - q0.i*q1.i - q0.j*q1.j - q0.k*q1.k,
                             q0.r*q1.i + q0.i*q1.r + q0.j*q1.k - q0.k*q1.j,
                             q0.r*q1.j - q0.i*q1.k + q0.j*q1.r + q0.k*q1.i,
                             q0.r*q1.k + q0.i*q1.j - q0.j*q1.i + q0.k*q1.r);
}

// float dot(Quaternion3f, Quaternion3f)
inline uniform float dot(const uniform Quaternion3f q0, const uniform Quaternion3f q1)
{
    return q0.r*q1.r + q0.i*q1.i + q0.j*q1.j + q0.k*q1.k;
}

// float dot(Quaternion3f, Quaternion3f)
inline varying float dot(const varying Quaternion3f q0, const varying Quaternion3f q1)
{
    return q0.r*q1.r + q0.i*q1.i + q0.j*q1.j + q0.k*q1.k;
}

// Quaternion3f rcp(Quaternion3f)
inline uniform Quaternion3f rcp(const uniform Quaternion3f q)
{
    return conjugate(q) * rcp(dot(q,q));
}

// Quaternion3f rcp(Quaternion3f)
inline varying Quaternion3f rcp(const varying Quaternion3f q)
{
    return conjugate(q) * rcp(dot(q,q));
}

// Quaternion3f = Quaternion3f / float
inline uniform Quaternion3f operator/(const uniform Quaternion3f q, const uniform float f)
{
    return q * rcp(f);
}

// Quaternion3f = Quaternion3f / float
inline varying Quaternion3f operator/(const varying Quaternion3f q, const varying float f)
{
    return q * rcp(f);
}

// Quaternion3f = float / Quaternion3f
inline uniform Quaternion3f operator/(const uniform float f, const uniform Quaternion3f q)
{
    return f * rcp(q);
}

// Quaternion3f = float / Quaternion3f
inline varying Quaternion3f operator/(const varying float f, const varying Quaternion3f q)
{
    return f * rcp(q);
}

// Quaternion3f = Quaternion3f / Quaternion3f
inline uniform Quaternion3f operator/(const uniform Quaternion3f q0, const uniform Quaternion3f q1)
{
    return q0 * rcp(q1);
}

// Quaternion3f = Quaternion3f / Quaternion3f
inline varying Quaternion3f operator/(const varying Quaternion3f q0, const varying Quaternion3f q1)
{
    return q0 * rcp(q1);
}

//--------------------------------------------------------------------------------------------------
// Equality
//--------------------------------------------------------------------------------------------------
 
//  bool = isEqual(Quaternion3f, Quaternion3f, float)
inline uniform bool isEqual(const uniform Quaternion3f q0, const uniform Quaternion3f q1, const uniform float tol)
{
    return isEqual(q0.r, q1.r, tol) && isEqual(q0.i, q1.i, tol) &&
           isEqual(q0.j, q1.j, tol) && isEqual(q0.k, q1.k, tol);
}

//  bool = isEqual(Quaternion3f, Quaternion3f, float)
inline varying bool isEqual(const varying Quaternion3f q0, const varying Quaternion3f q1, const varying float tol)
{
    return isEqual(q0.r, q1.r, tol) && isEqual(q0.i, q1.i, tol) &&
           isEqual(q0.j, q1.j, tol) && isEqual(q0.k, q1.k, tol);
}

//  bool = isEqual(Quaternion3f, Quaternion3f)
inline uniform bool isEqual(const uniform Quaternion3f q0, const uniform Quaternion3f q1)
{
    return isEqual(q0, q1, sEpsilon);
}

//  bool = isEqual(Quaternion3f, Quaternion3f)
inline varying bool isEqual(const varying Quaternion3f q0, const varying Quaternion3f q1)
{
    return isEqual(q0, q1, sEpsilon);
}

//  bool = isEqualFixedEps(Quaternion3f, Quaternion3f, float)
inline uniform bool isEqualFixedEps(const uniform Quaternion3f q0, const uniform Quaternion3f q1, const uniform float tol)
{
    return isEqualFixedEps(q0.r, q1.r, tol) && isEqualFixedEps(q0.i, q1.i, tol) &&
           isEqualFixedEps(q0.j, q1.j, tol) && isEqualFixedEps(q0.k, q1.k, tol);
}

//  bool = isEqualFixedEps(Quaternion3f, Quaternion3f, float)
inline varying bool isEqualFixedEps(const varying Quaternion3f q0, const varying Quaternion3f q1, const varying float tol)
{
    return isEqualFixedEps(q0.r, q1.r, tol) && isEqualFixedEps(q0.i, q1.i, tol) &&
           isEqualFixedEps(q0.j, q1.j, tol) && isEqualFixedEps(q0.k, q1.k, tol);
}

//  bool = isEqualFixedEps(Quaternion3f, Quaternion3f)
inline uniform bool isEqualFixedEps(const uniform Quaternion3f q0, const uniform Quaternion3f q1)
{
    return isEqualFixedEps(q0, q1, sEpsilon);
}

//  bool = isEqualFixedEps(Quaternion3f, Quaternion3f)
inline varying bool isEqualFixedEps(const varying Quaternion3f q0, const varying Quaternion3f q1)
{
    return isEqualFixedEps(q0, q1, sEpsilon);
}

//--------------------------------------------------------------------------------------------------
// Common math ops
//--------------------------------------------------------------------------------------------------
 
// Quaternion = normalize(Quaternion)
inline uniform Quaternion3f normalize(const uniform Quaternion3f q)
{
    return q * (1.0f / sqrt(dot(q,q)));
}

// Quaternion = normalize(Quaternion)
inline varying Quaternion3f normalize(const varying Quaternion3f q)
{
    return q * (1.0f / sqrt(dot(q,q)));
}

// bool = isNormalized(Quaternion)
inline uniform bool isNormalized(const uniform Quaternion3f q)
{
    return isNormalizedLengthSqr(dot(q, q));
}

// bool = isNormalized(Quaternion)
inline varying bool isNormalized(const varying Quaternion3f q)
{
    return isNormalizedLengthSqr(dot(q, q));
}

// Vec3f = Quaternion3f * Vec3f
// Rotate vector v by quaternion q
inline uniform Vec3f operator*(const uniform Quaternion3f q, const uniform Vec3f v)
{
    return asVec3(q * Quaternion3f_ctor(v) * conjugate(q));
}

// Vec3f = Quaternion3f * Vec3f
// Rotate vector v by quaternion q
inline varying Vec3f operator*(const varying Quaternion3f q, const varying Vec3f v)
{
    return asVec3(q * Quaternion3f_ctor(v) * conjugate(q));
}

// Vec3f transform Vec3f by Quaternion3f
inline uniform Vec3f transform(const uniform Quaternion3f q, const uniform Vec3f v)
{
    return q * v;
}

// Vec3f transform Vec3f by Quaternion3f
inline varying Vec3f transform(const varying Quaternion3f q, const varying Vec3f v)
{
    return q * v;
}

// Quaternion3f slerp(Quaternion3f, Quaternion3f, float)
#define Q3F_SLERP(UV)                                   \
{                                                       \
    UV float angle = 0.0f;                              \
    UV float sinAngle = 0.0f;                           \
    UV float cosAngle = dot(q0, q1);                    \
    if (abs(cosAngle) < 1.0f) {                         \
        angle = dw_acos(cosAngle);                      \
        sinAngle = sin(angle);                          \
    }                                                   \
    if (abs(sinAngle) < 0.00001f) {                     \
        return (1.0f-t)*q0 + t*q1;                      \
    }                                                   \
    UV float rcpSin = rcp(sinAngle);                    \
    UV float t0 = sin((1.0f - t) * angle) * rcpSin;     \
    UV float t1 = sin(t * angle) * rcpSin;              \
    return t0*q0 + t1*q1;                               \
}

// Quaternion3f slerp(Quaternion3f, Quaternion3f, float)
inline uniform Quaternion3f slerp(const uniform Quaternion3f q0, const uniform Quaternion3f q1, const uniform float t)
{
    Q3F_SLERP(uniform);
}

// Quaternion3f slerp(Quaternion3f, Quaternion3f, float)
inline varying Quaternion3f slerp(const varying Quaternion3f q0, const varying Quaternion3f q1, const varying float t)
{
    Q3F_SLERP(varying);
}

