// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file Col3.isph
/// @brief
/// defines the 3-channel rgb Col3 types and methods.
#pragma once

#include "Constants.isph"
#include "Math.isph"

//--------------------------------------------------------------------------------------------------
// Types
//--------------------------------------------------------------------------------------------------

struct Col3f
{
    float r;
    float g;
    float b;
};

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------

static const uniform Col3f sBlack = {0.0f, 0.0f, 0.0f};
static const uniform Col3f sWhite = {1.0f, 1.0f, 1.0f};

//--------------------------------------------------------------------------------------------------
// Constructors
//--------------------------------------------------------------------------------------------------

// Col3f = {r, g, b}
inline uniform Col3f Col3f_ctor(const uniform float r, const uniform float g, const uniform float b)
{
    uniform Col3f result;
    result.r = r;
    result.g = g;
    result.b = b;
    return result;
}

// Col3f = {r, g, b}
inline varying Col3f Col3f_ctor(const varying float r, const varying float g, const varying float b)
{
    varying Col3f result;
    result.r = r;
    result.g = g;
    result.b = b;
    return result;
}

// Col3f = {f, f, f}
inline uniform Col3f Col3f_ctor(const uniform float f)
{
    return Col3f_ctor(f, f, f);
}

// Col3f = {f, f, f}
inline varying Col3f Col3f_ctor(const varying float f)
{
    return Col3f_ctor(f, f, f);
}

// Col3f = {a[0], a[1], a[2]}
inline uniform Col3f Col3f_ctor(const uniform float a[])
{
    return Col3f_ctor(a[0], a[1], a[2]);
}

// Col3f = {a[0], a[1], a[2]}
inline varying Col3f Col3f_ctor(const varying float a[])
{
    return Col3f_ctor(a[0], a[1], a[2]);
}

//--------------------------------------------------------------------------------------------------
// Arithmetic
//--------------------------------------------------------------------------------------------------

// Col3f = Col3f + Col3f
inline uniform Col3f operator+(const uniform Col3f c0, const uniform Col3f c1)
{
    return Col3f_ctor(c0.r+c1.r, c0.g+c1.g, c0.b+c1.b);
}

// Col3f = Col3f + Col3f
inline varying Col3f operator+(const varying Col3f c0, const varying Col3f c1)
{
    return Col3f_ctor(c0.r+c1.r, c0.g+c1.g, c0.b+c1.b);
}

// Col3f = float + Col3f
inline uniform Col3f operator+(const uniform float f, const uniform Col3f c)
{
    return Col3f_ctor(f) + c;
}

// Col3f = float + Col3f
inline varying Col3f operator+(const varying float f, const varying Col3f c)
{
    return Col3f_ctor(f) + c;
}

// Col3f = Col3f + float
inline uniform Col3f operator+(const uniform Col3f c, const uniform float f)
{
    return f + c;
}

// Col3f = Col3f + float
inline varying Col3f operator+(const varying Col3f c, const varying float f)
{
    return f + c;
}

// Col3f = Col3f - Col3f
inline uniform Col3f operator-(const uniform Col3f c0, const uniform Col3f c1)
{
    return Col3f_ctor(c0.r-c1.r, c0.g-c1.g, c0.b-c1.b);
}

// Col3f = Col3f - Col3f
inline varying Col3f operator-(const varying Col3f c0, const varying Col3f c1)
{
    return Col3f_ctor(c0.r-c1.r, c0.g-c1.g, c0.b-c1.b);
}

// Col3f = float - Col3f
inline uniform Col3f operator-(const uniform float f, const uniform Col3f c)
{
    return Col3f_ctor(f) - c;
}

// Col3f = float - Col3f
inline varying Col3f operator-(const varying float f, const varying Col3f c)
{
    return Col3f_ctor(f) - c;
}

// Col3f = Col3f - float
inline uniform Col3f operator-(const uniform Col3f c, const uniform float f)
{
    return c - Col3f_ctor(f);
}

// Col3f = Col3f - float
inline varying Col3f operator-(const varying Col3f c, const varying float f)
{
    return c - Col3f_ctor(f);
}

// Col3f = Col3f * Col3f
inline uniform Col3f operator*(const uniform Col3f c0, const uniform Col3f c1)
{
    return Col3f_ctor(c0.r*c1.r, c0.g*c1.g, c0.b*c1.b);
}

// Col3f = Col3f * Col3f
inline varying Col3f operator*(const varying Col3f c0, const varying Col3f c1)
{
    return Col3f_ctor(c0.r*c1.r, c0.g*c1.g, c0.b*c1.b);
}

// Col3f = float * Col3f
inline uniform Col3f operator*(const uniform float f, const uniform Col3f c)
{
    return Col3f_ctor(f) * c;
}

// Col3f = float * Col3f
inline varying Col3f operator*(const varying float f, const varying Col3f c)
{
    return Col3f_ctor(f) * c;
}

// Col3f = Col3f * float
inline uniform Col3f operator*(const uniform Col3f c, const uniform float f)
{
    return f * c;
}

// Col3f = Col3f * float
inline varying Col3f operator*(const varying Col3f c, const varying float f)
{
    return f * c;
}

// Col3f = Col3f / Col3f
inline uniform Col3f operator/(const uniform Col3f c0, const uniform Col3f c1)
{
    return Col3f_ctor(c0.r/c1.r, c0.g/c1.g, c0.b/c1.b);
}

// Col3f = Col3f / Col3f
inline varying Col3f operator/(const varying Col3f c0, const varying Col3f c1)
{
    return Col3f_ctor(c0.r/c1.r, c0.g/c1.g, c0.b/c1.b);
}

// Col3f = Col3f / float
inline uniform Col3f operator/(const uniform Col3f c, const uniform float f)
{
    return c / Col3f_ctor(f);
}

// Col3f = Col3f / Col3f
inline varying Col3f operator/(const varying Col3f c, const varying float f)
{
    return c / Col3f_ctor(f);
}

// Col3f rcp(Col3f)
inline uniform Col3f rcp(const uniform Col3f c)
{
    return Col3f_ctor(rcp(c.r), rcp(c.g), rcp(c.b));
}

// Col3f rcp(Col3f)
inline varying Col3f rcp(const varying Col3f c)
{
    return Col3f_ctor(rcp(c.r), rcp(c.g), rcp(c.b));
}

//--------------------------------------------------------------------------------------------------
// Equality
//--------------------------------------------------------------------------------------------------

// bool isEqual(Col3f, Col3f, tol)
inline uniform bool isEqual(const uniform Col3f c0, const uniform Col3f c1, const uniform float tol)
{
    return isEqual(c0.r, c1.r, tol) && isEqual(c0.g, c1.g, tol) && isEqual(c0.b, c1.b, tol);
}

// bool isEqual(Col3f, Col3f, tol)
inline varying bool isEqual(const varying Col3f c0, const varying Col3f c1, const varying float tol)
{
    return isEqual(c0.r, c1.r, tol) && isEqual(c0.g, c1.g, tol) && isEqual(c0.b, c1.b, tol);
}

// bool isEqual(Col3f, Col3f)
inline uniform bool isEqual(const uniform Col3f c0, const uniform Col3f c1)
{
    return isEqual(c0, c1, sEpsilon);
}

// bool isEqual(Col3f, Col3f)
inline varying bool isEqual(const varying Col3f c0, const varying Col3f c1)
{
    return isEqual(c0, c1, sEpsilon);
}

// bool isEqualFixedEps(Col3f, Col3f, tol)
inline uniform bool isEqualFixedEps(const uniform Col3f c0, const uniform Col3f c1, const uniform float tol)
{
    return isEqualFixedEps(c0.r, c1.r, tol) && isEqualFixedEps(c0.g, c1.g, tol) && isEqualFixedEps(c0.b, c1.b, tol);
}

// bool isEqualFixedEps(Col3f, Col3f, tol)
inline varying bool isEqualFixedEps(const varying Col3f c0, const varying Col3f c1, const uniform float tol)
{
    return isEqualFixedEps(c0.r, c1.r, tol) && isEqualFixedEps(c0.g, c1.g, tol) && isEqualFixedEps(c0.b, c1.b, tol);
}

// bool isEqualFixedEps(Col3f, Col3f)
inline uniform bool isEqualFixedEps(const uniform Col3f c0, const uniform Col3f c1)
{
    return isEqualFixedEps(c0, c1, sEpsilon);
}

// bool isEqualFixedEps(Col3f, Col3f)
inline varying bool isEqualFixedEps(const varying Col3f c0, const varying Col3f c1)
{
    return isEqualFixedEps(c0, c1, sEpsilon);
}

// bool isBlack(Col3f)
inline uniform bool isBlack(const uniform Col3f c)
{
    return isEqual(c, sBlack);
}

// bool isBlack(Col3f)
inline varying bool isBlack(const varying Col3f c)
{
    return isEqual(c, sBlack);
}

// bool isWhite(Col3f)
inline uniform bool isWhite(const uniform Col3f c)
{
    return isEqual(c, sWhite);
}

// bool isWhite(Col3f)
inline varying bool isWhite(const varying Col3f c)
{
    return isEqual(c, sWhite);
}

//--------------------------------------------------------------------------------------------------
// Common math ops
//--------------------------------------------------------------------------------------------------

// Col3f min(Col3f, Col3f)
inline uniform Col3f min(const uniform Col3f c0, const uniform Col3f c1)
{
    return Col3f_ctor(min(c0.r, c1.r), min(c0.g, c1.g), min(c0.b, c1.b));
}

// Col3f min(Col3f, Col3f)
inline varying Col3f min(const varying Col3f c0, const varying Col3f c1)
{
    return Col3f_ctor(min(c0.r, c1.r), min(c0.g, c1.g), min(c0.b, c1.b));
}

// Col3f max(Col3f, Col3f)
inline uniform Col3f max(const uniform Col3f c0, const uniform Col3f c1)
{
    return Col3f_ctor(max(c0.r, c1.r), max(c0.g, c1.g), max(c0.b, c1.b));
}

// Col3f max(Col3f, Col3f)
inline varying Col3f max(const varying Col3f c0, const varying Col3f c1)
{
    return Col3f_ctor(max(c0.r, c1.r), max(c0.g, c1.g), max(c0.b, c1.b));
}

// Col3f clamp(Col3f c, float lo, float hi)
inline uniform Col3f clamp(const uniform Col3f c, const uniform float lo, const uniform float hi)
{
    return min(max(c, Col3f_ctor(lo)), Col3f_ctor(hi));
}

// Col3f clamp(Col3f c, float lo, float hi)
inline varying Col3f clamp(const varying Col3f c, const uniform float lo, const uniform float hi)
{
    return min(max(c, Col3f_ctor(lo)), Col3f_ctor(hi));
}

// Col3f lerp(Col3f, Col3f, float)
inline uniform Col3f lerp(const uniform Col3f c0, const uniform Col3f c1, const uniform float t)
{
    return (1.0f - t) * c0 + t * c1;
}

// Col3f lerp(Col3f, Col3f, float)
inline varying Col3f lerp(const varying Col3f c0, const varying Col3f c1, const varying float t)
{
    return (1.0f - t) * c0 + t * c1;
}

// Col3f bilerp(Col3f, Col3f, Col3f, Col3f, float, float)
inline uniform Col3f bilerp(const uniform Col3f c00, const uniform Col3f c01,
                            const uniform Col3f c10, const uniform Col3f c11,
                            const uniform float s, const uniform float t)
{
    return lerp(lerp(c00, c01, s), lerp(c10, c11, s), t);
}

// Col3f bilerp(Col3f, Col3f, Col3f, Col3f, float, float)
inline varying Col3f bilerp(const varying Col3f c00, const varying Col3f c01,
                            const varying Col3f c10, const varying Col3f c11,
                            const varying float s, const varying float t)
{
    return lerp(lerp(c00, c01, s), lerp(c10, c11, s), t);
}

// Col3f sqrt(Col3f)
inline uniform Col3f sqrt(const uniform Col3f c)
{
    return Col3f_ctor(sqrt(c.r), sqrt(c.g), sqrt(c.b));
}

// Col3f sqrt(Col3f)
inline varying Col3f sqrt(const varying Col3f c)
{
    return Col3f_ctor(sqrt(c.r), sqrt(c.g), sqrt(c.b));
}

// Col3f log(Col3f)
inline uniform Col3f log(const uniform Col3f c)
{
    return Col3f_ctor(log(c.r), log(c.g), log(c.b));
}

// Col3f log(Col3f)
inline varying Col3f log(const varying Col3f c)
{
    return Col3f_ctor(log(c.r), log(c.g), log(c.b));
}

// float luminance(Col3f)
inline uniform float luminance(const uniform Col3f c)
{
    return 0.299f * c.r + 0.587f * c.g + 0.114f * c.b;
}

// float luminance(Col3f)
inline varying float luminance(const varying Col3f c)
{
    return 0.299f * c.r + 0.587f * c.g + 0.114f * c.b;
}

