// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file ColorSpace.isph
/// @brief Converts between HSV and RGB colors
#pragma once

#include "Col3.isph"

//--------------------------------------------------------------------------------------------------
// float rgbToHue(color, chroma, maxChannelIndex)
//--------------------------------------------------------------------------------------------------

#define RGB_TO_HUE(UV)                                  \
{                                                       \
    UV float h;                                         \
    if (isZero(chroma)) {                               \
        h = 0.0f;                                       \
    } else {                                            \
        switch (maxChannelIndex) {                      \
        case 0:                                         \
            h = (color.g - color.b) / chroma;           \
            break;                                      \
        case 1:                                         \
            h = 2.0f + ((color.b - color.r) / chroma);  \
            break;                                      \
        default:                                        \
            h = 4.0f + ((color.r - color.g) / chroma);  \
            break;                                      \
        }                                               \
        h = h * 60.0f;                                  \
        h = fmod(h, 360.0f);                            \
        if (h < 0.0f) {                                 \
            h = h + 360.0f;                             \
        }                                               \
        h = h / 360.0f;                                 \
    }                                                   \
    return h;                                           \
}

inline uniform float rgbToHue(const uniform Col3f color, const uniform float chroma, const uniform int maxChannelIndex)
{
    RGB_TO_HUE(uniform);
}

inline varying float rgbToHue(const varying Col3f color, const varying float chroma, const varying int maxChannelIndex)
{
    RGB_TO_HUE(varying);
}

//--------------------------------------------------------------------------------------------------
// int maxRgbChannel(color)
//--------------------------------------------------------------------------------------------------

#define MAX_RGB_CHANNEL(UV)         \
{                                   \
    UV float maxChannel = color.r;  \
    UV int result = 0;              \
    if (color.g > maxChannel) {     \
        maxChannel = color.g;       \
        result = 1;                 \
    }                               \
    if (color.b > maxChannel) {     \
        result = 2;                 \
    }                               \
    return result;                  \
}

inline uniform int maxRgbChannel(const uniform Col3f color)
{
    MAX_RGB_CHANNEL(uniform);
}

inline varying int maxRgbChannel(const varying Col3f color)
{
    MAX_RGB_CHANNEL(varying);
}

//--------------------------------------------------------------------------------------------------
// float rgbToHue(color)
//--------------------------------------------------------------------------------------------------

#define RGB_TO_HUE_1(UV)                                        \
{                                                               \
    UV float minChannel = min(color.r, min(color.g, color.b));  \
    UV float maxChannel = max(color.r, max(color.g, color.b));  \
    UV float chroma = maxChannel - minChannel;                  \
    UV float h;                                                 \
    if (isZero(chroma)) {                                       \
        h = 0.0f;                                               \
    } else {                                                    \
        if (isEqual(maxChannel, color.r)) {                     \
            h = ((color.g - color.b) / chroma);                 \
        } else if (isEqual(maxChannel, color.g)) {              \
            h = 2.0f + (color.b - color.r) / chroma;            \
        } else {                                                \
            h = 4.0f + (color.r - color.g) / chroma;            \
        }                                                       \
        h = h * 60.0f;                                          \
        h = fmod(h, 360.0f);                                    \
        if (h < 0.0f) {                                         \
            h = h + 360.0f;                                     \
        }                                                       \
        h = h / 360.0f;                                         \
    }                                                           \
    return h;                                                   \
}

inline uniform float rgbToHue(const uniform Col3f color)
{
    RGB_TO_HUE_1(uniform);
}

inline varying float rgbToHue(const varying Col3f color)
{
    RGB_TO_HUE_1(varying);
}

//--------------------------------------------------------------------------------------------------
// Col3f rgbToHsv(rgb)
//--------------------------------------------------------------------------------------------------

#define RGB_TO_HSV(UV)                                      \
{                                                           \
    UV int maxChannelIndex = maxRgbChannel(rgb);            \
    UV float minChannel = min(rgb.r, min(rgb.g, rgb.b));    \
    UV float maxChannel = max(rgb.r, max(rgb.g, rgb.b));    \
    UV float chroma = maxChannel - minChannel;              \
    UV float h = 0.0f;                                      \
    UV float s = 0.0f;                                      \
    if (!isZero(maxChannel)) {                              \
        h = rgbToHue(rgb, chroma, maxChannelIndex);         \
        s = chroma / maxChannel;                            \
    }                                                       \
    UV float v = maxChannel;                                \
    return Col3f_ctor(h, s, v);                             \
} 

inline uniform Col3f rgbToHsv(const uniform Col3f rgb)
{
    RGB_TO_HSV(uniform);
}

inline varying Col3f rgbToHsv(const varying Col3f rgb)
{
    RGB_TO_HSV(varying);
} 

//--------------------------------------------------------------------------------------------------
// Col3f rgbToHsl(rgb)
//--------------------------------------------------------------------------------------------------

#define RGB_TO_HSL(UV)                                       \
{                                                           \
    UV int maxChannelIndex = maxRgbChannel(rgb);            \
    UV float minChannel = min(rgb.r, min(rgb.g, rgb.b));    \
    UV float maxChannel = max(rgb.r, max(rgb.g, rgb.b));    \
    UV float chroma = maxChannel - minChannel;              \
    UV float h = 0.0f;                                      \
    UV float s = 0.0f;                                      \
    UV float l = (maxChannel + minChannel) * 0.5f;          \
    if (!isZero(chroma)) {                                  \
        if (l > 0.5) {                                      \
            if (isEqual(l, 1.0f) ) {                        \
                s = 1.0f;                                   \
            } else {                                        \
                s = abs(chroma * 0.5f / (1.0f - l));        \
            }                                               \
        } else {                                            \
            if (l <= 0) {                                   \
                s = chroma;                                 \
            } else {                                        \
                s = chroma * 0.5f / l;                      \
            }                                               \
        }                                                   \
        h = rgbToHue(rgb, chroma, maxChannelIndex);         \
    }                                                       \
    return Col3f_ctor(h, s, l);                             \
}

inline uniform Col3f rgbToHsl(const uniform Col3f rgb)
{
    RGB_TO_HSL(uniform);
}

inline varying Col3f rgbToHsl(const varying Col3f rgb)
{
    RGB_TO_HSL(varying);
}

//--------------------------------------------------------------------------------------------------
// Col3f hsvToRgb(hsv)
//--------------------------------------------------------------------------------------------------

#define HSV_TO_RGB(UV)                              \
{                                                   \
    UV float h = hsv.r;                             \
    UV float s = hsv.g;                             \
    UV float v = hsv.b;                             \
    UV float r, g, b;                               \
    if (isZero(s)) {                                \
        r = g = b = v;                              \
    } else {                                        \
        h = fmod(h, 1.0f);                          \
        if (h < 0) {                                \
            h = h + 1.0f;                           \
        }                                           \
        h = h * 360.0f;                             \
        if (isEqual(h, 360.0f)) {                   \
            h = 0.0f;                               \
        }                                           \
        h = h / 60.0f;                              \
        UV int sector = (UV int)h;                  \
        UV float f = h - (UV float)sector;          \
        UV float p = v * (1.0f - s);                \
        UV float q = v * (1.0f - s * f);            \
        UV float t = v * (1.0f - s * (1.0f - f));   \
        switch (sector) {                           \
        case 0:  r = v; g = t; b = p; break;        \
        case 1:  r = q; g = v; b = p; break;        \
        case 2:  r = p; g = v; b = t; break;        \
        case 3:  r = p; g = q; b = v; break;        \
        case 4:  r = t; g = p; b = v; break;        \
        case 5:  r = v; g = p; b = q; break;        \
        default: r = p; g = p; b = p; break;        \
        }                                           \
    }                                               \
    return Col3f_ctor(r, g, b);                     \
}

inline uniform Col3f hsvToRgb(const uniform Col3f hsv)
{
    HSV_TO_RGB(uniform);
}

inline varying Col3f hsvToRgb(const varying Col3f hsv)
{
    HSV_TO_RGB(varying);
}

//--------------------------------------------------------------------------------------------------
// Col3f hslToRgb(hsl)
//--------------------------------------------------------------------------------------------------

#define HSL_TO_RGB(UV)                                                       \
{                                                                           \
    UV float h = hsl.r;                                                     \
    UV float s = hsl.g;                                                     \
    UV float l = hsl.b;                                                     \
    UV float r, g, b;                                                       \
    if (isZero(s)) {                                                        \
        r = g = b = l;                                                      \
    } else {                                                                \
        h = fmod(h, 1.0f);                                                  \
        if (h < 0) {                                                        \
            h = h + 1.0f;                                                   \
        }                                                                   \
        h = h * 360.0f;                                                     \
        if (isEqual(h, 360.0f)) {                                           \
            h = 0.0f;                                                       \
        }                                                                   \
        h = h / 60.0f;                                                      \
        UV int sector = (UV int)h;                                          \
        UV float f = h - (UV float)sector;                                  \
        UV float p, w, q, t;                                                \
        if (l < 0.5) {                                                      \
            p = l * (1.0f - s);                                             \
            w = l * (1.0f + s);                                             \
            q = l * (s * (1.0f - 2.0f * f) + 1.0f);                         \
            t = l * (s * (2.0f * f - 1.0f) + 1.0f);                         \
        } else {                                                            \
            p = l * (1.0f + s) - s;                                         \
            w = l * (1.0f - s) + s;                                         \
            q = l * (1.0f + s * (2.0f * f - 1.0f)) + s * (1.0f - 2.0f * f); \
            t = l * (1.0f + s * (1.0f - 2.0f * f)) + s * (2.0f * f - 1.0f); \
        }                                                                   \
        switch (sector) {                                                   \
        case 0:  r = w; g = t; b = p; break;                                \
        case 1:  r = q; g = w; b = p; break;                                \
        case 2:  r = p; g = w; b = t; break;                                \
        case 3:  r = p; g = q; b = w; break;                                \
        case 4:  r = t; g = p; b = w; break;                                \
        case 5:  r = w; g = p; b = q; break;                                \
        default: r = p; g = p; b = p; break;                                \
        }                                                                   \
    }                                                                       \
    return Col3f_ctor(r, g, b);                                             \
}

inline uniform Col3f hslToRgb(const uniform Col3f hsl)
{
    HSL_TO_RGB(uniform);
}

inline varying Col3f hslToRgb(const varying Col3f hsl)
{
    HSL_TO_RGB(varying);
}

//--------------------------------------------------------------------------------------------------
// Col3f hueToRgb(hue)
//--------------------------------------------------------------------------------------------------

inline uniform Col3f hueToRgb(const uniform float hue)
{
    return hsvToRgb(Col3f_ctor(hue, 1.0f, 1.0f));
}

inline varying Col3f hueToRgb(const varying float hue)
{
    return hsvToRgb(Col3f_ctor(hue, 1.0f, 1.0f));
}

