Import('env')
from os import path

# extract library name from current/parent path
modName = path.basename(path.abspath('..'))
libName = path.basename(path.abspath('.'))
# --------------------------------------------------------------------------
name       = modName+'_'+libName
sources    = env.DWAGlob('*.cc')
sources    += env.DWAGlob('*.cpp')
incdir     = [env.Dir('#include'), env.Dir('$INSTALL_DIR/include')]

private_components = [
    'boost_filesystem_mt',
    'boost_regex_mt',
    'boost_thread_mt',
]
components = [
    'log4cplus',
]

if 'icc' in env['CC']:
    pass # For now.
elif 'gcc' in env['CC']:
    pass # For now.
elif 'clang' in env['CC']:
    pass # For now.

# --------------------------------------------------------------------------

publicHeaders = [
    'logging.h',
    'LoggingAssert.h',
]

env.DWAInstallInclude(publicHeaders, 'scene_rdl2/render/logging')

env.Append(CPPPATH=incdir)
env.DWAForceWarningAsError()
env.DWAUseComponents(components+private_components)
lib = env.DWASharedLibrary(name, sources)
target = env.DWAInstallLib(lib)

env['CXXFLAGS'].append('-Wno-deprecated-declarations')

env.DWAComponent(
    name,
    LIBS=target,
    CPPPATH=incdir,
    COMPONENTS=components,
    ISPCFLAGS=['-I' + str(x) for x in incdir])
env.DWAInstallSConscriptStub(
    name,
    LIBS=target,
    CPPPATH=[env.Dir('$INSTALL_DIR/include')],
    COMPONENTS=components)
env.DWALinkValidate(name)
