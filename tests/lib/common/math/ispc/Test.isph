// Copyright 2023 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file TestMath.isph

#include <scene_rdl2/common/math/ispc/Constants.isph>
#include <scene_rdl2/common/math/ispc/Math.isph>


#define VAR varying
#define UNI uniform

//----------------------------------------------------------------------
// bool = isEqual(x, y)
//----------------------------------------------------------------------
#define IS_EQUAL_TEST(VURES, VU0, VU1, V0, V1, R0)      \
    {                                                   \
        const VU0 float f0 = (VU0 float) V0;            \
        const VU1 float f1 = (VU1 float) V1;            \
        const VURES bool res = (VURES bool) R0;         \
        if (any(isEqual(f0, f1) != res)) {              \
            ++error;                                    \
        }                                               \
    }

inline uniform int
testIsEqual()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    IS_EQUAL_TEST(VAR, VAR, VAR, (pi + 1), (pi + 1.1), false);
    IS_EQUAL_TEST(VAR, VAR, VAR, (pi + 1), (pi + 1.0000001), true);
    IS_EQUAL_TEST(VAR, VAR, UNI, (1), (1.1), false);
    IS_EQUAL_TEST(VAR, VAR, UNI, (1), (1.0000001), true);
    IS_EQUAL_TEST(VAR, UNI, VAR, (1), (1.1), false);
    IS_EQUAL_TEST(VAR, UNI, VAR, (1), (1.0000001), true);
    IS_EQUAL_TEST(VAR, UNI, UNI, (1), (1.1), false);
    IS_EQUAL_TEST(UNI, UNI, UNI, (1), (1.0000001), true);

    return error;
}

//----------------------------------------------------------------------
// bool = isEqualFixedEps(x, y)
//----------------------------------------------------------------------
#define IS_EQUAL_FIXED_EPS_TEST(VURES, VU0, VU1, V0, V1, R0)    \
    {                                                           \
        const VU0 float f0 = (VU0 float) V0;                    \
        const VU1 float f1 = (VU1 float) V1;                    \
        const VURES bool res = (VURES bool) R0;                 \
        if (any(isEqualFixedEps(f0, f1) != res)) {              \
            ++error;                                            \
        }                                                       \
    }

inline uniform int
testIsEqualFixedEps()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    IS_EQUAL_FIXED_EPS_TEST(VAR, VAR, VAR, (pi + 1), (pi + 1.1), false);
    IS_EQUAL_FIXED_EPS_TEST(VAR, VAR, VAR, (pi + 1), (pi + 1.0000001), true);
    IS_EQUAL_FIXED_EPS_TEST(VAR, VAR, UNI, (1), (1.1), false);
    IS_EQUAL_FIXED_EPS_TEST(VAR, VAR, UNI, (1), (1.0000001), true);
    IS_EQUAL_FIXED_EPS_TEST(VAR, UNI, VAR, (1), (1.1), false);
    IS_EQUAL_FIXED_EPS_TEST(VAR, UNI, VAR, (1), (1.0000001), true);
    IS_EQUAL_FIXED_EPS_TEST(VAR, UNI, UNI, (1), (1.1), false);
    IS_EQUAL_FIXED_EPS_TEST(UNI, UNI, UNI, (1), (1.0000001), true);

    return error;
}

//----------------------------------------------------------------------
// bool = isZero(x)
//----------------------------------------------------------------------
#define IS_ZERO_TEST(VURES, VU0, V0, R0)        \
    {                                           \
        const VU0 float f0 = (VU0 float) V0;    \
        const VURES bool res = (VURES bool) R0; \
        if (any(isZero(f0) != res)) {           \
            ++error;                            \
        }                                       \
    }

inline uniform int
testIsZero()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    IS_ZERO_TEST(VAR, VAR, (pi + 1), false);
    IS_ZERO_TEST(VAR, VAR, (pi * 0.0f), true);
    IS_ZERO_TEST(VAR, UNI, (0.1), false);
    IS_ZERO_TEST(VAR, UNI, (0.0000001), true);
    IS_ZERO_TEST(UNI, UNI, (0.1), false);
    IS_ZERO_TEST(UNI, UNI, (0.0000001), true);

    return error;
}

//----------------------------------------------------------------------
// bool = isOne(x)
//----------------------------------------------------------------------
#define IS_ONE_TEST(VURES, VU0, V0, R0)        \
    {                                           \
        const VU0 float f0 = (VU0 float) V0;    \
        const VURES bool res = (VURES bool) R0; \
        if (any(isOne(f0) != res)) {            \
            ++error;                            \
        }                                       \
    }

inline uniform int
testIsOne()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    IS_ONE_TEST(VAR, VAR, (pi + 2), false);
    IS_ONE_TEST(VAR, VAR, (pi-pi + 1), true);
    IS_ONE_TEST(VAR, UNI, (1.0), true);
    IS_ONE_TEST(VAR, UNI, (-1.0), false);
    IS_ONE_TEST(VAR, UNI, (0.9), false);
    IS_ONE_TEST(VAR, UNI, (1.1), false);
    IS_ONE_TEST(VAR, UNI, (0.9999999), true);
    IS_ONE_TEST(VAR, UNI, (1.0000001), true);
    IS_ONE_TEST(UNI, UNI, (0.9), false);
    IS_ONE_TEST(UNI, UNI, (1.1), false);
    IS_ONE_TEST(UNI, UNI, (0.9999999), true);
    IS_ONE_TEST(UNI, UNI, (1.0000001), true);

    return error;
}

// ---------------------------------------------------------------------
// bool = isNormalizedLengthSqr(x)
// ---------------------------------------------------------------------
#define IS_NORMALIZED_LENGTH_SQR_TEST(VU0, V0, R0)      \
    {                                                   \
        const VU0 float f0 = (VU0 float) V0;            \
        const VU0 bool res = (VU0 bool) R0;             \
        if (any(isNormalizedLengthSqr(f0) != res)) {    \
            ++error;                                    \
        }                                               \
    }

inline uniform int
testIsNormalizedLengthSqr()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    IS_NORMALIZED_LENGTH_SQR_TEST(VAR, (1.001), true);
    IS_NORMALIZED_LENGTH_SQR_TEST(VAR, (pi + 1), false);
    IS_NORMALIZED_LENGTH_SQR_TEST(UNI, (1), true);

    return error;
}

//----------------------------------------------------------------------
// bool = isfinite(x)
//----------------------------------------------------------------------
#define IS_FINITE_TEST(VURES, VU0, V0, R0)      \
    {                                           \
        const VU0 float f0 = (VU0 float) V0;    \
        const VURES bool res = (VURES bool) R0; \
        if (any(isfinite(f0) != res)) {         \
            ++error;                            \
        }                                       \
    }

inline uniform int
testIsFinite()
{
    uniform int error = 0;
    const varying int pi = programIndex;
    uniform double zero = 0.0;

    IS_FINITE_TEST(VAR, VAR, (pi + 1) / zero, false);
    IS_FINITE_TEST(VAR, VAR, dw_acos(pi + 1.1), false);
    IS_FINITE_TEST(VAR, VAR, dw_acos(2.0 * pi / programCount - 0.9999), true);
    IS_FINITE_TEST(VAR, VAR, (pi + 1), true);
    IS_FINITE_TEST(UNI, UNI, (0.1 / zero), false);
    IS_FINITE_TEST(UNI, UNI, (-0.1 / zero), false);
    IS_FINITE_TEST(UNI, UNI, dw_acos(1.1), false);
    IS_FINITE_TEST(UNI, UNI, dw_acos(0.25), true);
    IS_FINITE_TEST(UNI, UNI, (0.1), true);
    IS_FINITE_TEST(UNI, UNI, zero, true);

    return error;
}

//----------------------------------------------------------------------
// bool = isinf(x)
//----------------------------------------------------------------------
#define IS_INF_TEST(VURES, VU0, V0, R0)         \
    {                                           \
        const VU0 float f0 = (VU0 float) V0;    \
        const VURES bool res = (VURES bool) R0; \
        if (any(isinf(f0) != res)) {            \
            ++error;                            \
        }                                       \
    }

inline uniform int
testIsInf()
{
    uniform int error = 0;
    const varying int pi = programIndex;
    uniform double zero = 0.0;

    IS_INF_TEST(VAR, VAR, (pi + 1) / zero, true);
    IS_INF_TEST(VAR, VAR, dw_acos(pi + 1.1), false); // NaN, but not isinf
    IS_INF_TEST(VAR, VAR, dw_acos(2.0 * pi / programCount - 0.9999), false);
    IS_INF_TEST(VAR, VAR, (pi + 1), false);
    IS_INF_TEST(UNI, UNI, (0.1 / zero), true);
    IS_INF_TEST(UNI, UNI, (-0.1 / zero), true);
    IS_INF_TEST(UNI, UNI, dw_acos(1.1), false); // NaN, but not isinf
    IS_INF_TEST(UNI, UNI, dw_acos(0.25), false);
    IS_INF_TEST(UNI, UNI, (0.1), false);
    IS_INF_TEST(UNI, UNI, zero, false);

    return error;
}

//----------------------------------------------------------------------
// bool = isnormal(x)
//----------------------------------------------------------------------
#define IS_NORMAL_TEST(VURES, VU0, V0, R0)      \
    {                                           \
        const VU0 float f0 = (VU0 float) V0;    \
        const VURES bool res = (VURES bool) R0; \
        if (any(isnormal(f0) != res)) {         \
            ++error;                            \
        }                                       \
    }

inline uniform int
testIsNormal()
{
    uniform int error = 0;
    const varying int pi = programIndex;
    uniform double zero = 0.0;
    const uniform float denormMin = 0x1p-149f;

    IS_NORMAL_TEST(VAR, VAR, (pi + 1) / zero, false);
    IS_NORMAL_TEST(VAR, VAR, dw_acos(pi + 1.1), false);
    IS_NORMAL_TEST(VAR, VAR, dw_acos(2.0 * pi / programCount - 0.9999), true);
    IS_NORMAL_TEST(VAR, VAR, (pi + 1), true);
    IS_NORMAL_TEST(UNI, UNI, (0.1 / zero), false);
    IS_NORMAL_TEST(UNI, UNI, (-0.1 / zero), false);
    IS_NORMAL_TEST(UNI, UNI, dw_acos(1.1), false);
    IS_NORMAL_TEST(UNI, UNI, dw_acos(0.25), true);
    IS_NORMAL_TEST(UNI, UNI, (0.1), true);
    IS_NORMAL_TEST(UNI, UNI, denormMin, false);
    IS_NORMAL_TEST(UNI, UNI, zero, false);

    return error;
}

//----------------------------------------------------------------------
// val = lerp(a, b, amt)
//----------------------------------------------------------------------
#define LERP_TEST(VURES, VU0, VU1, VU2, V0, V1, V2)     \
    {                                                   \
        const VU0 float f0 = (VU0 float) V0;            \
        const VU1 float f1 = (VU1 float) V1;            \
        const VU2 float f2 = (VU2 float) V2;            \
        const VURES float res = f0 + f2 * (f1 - f0);    \
        if (any(!isEqual(lerp(f0, f1, f2), res))) {     \
            ++error;                                    \
        }                                               \
    }

inline uniform int
testLerp()
{
    uniform int error = 0;
    const varying int pi = programIndex;
    LERP_TEST(VAR, VAR, VAR, VAR, (pi + 1), (pi + 2), (.9 * pi));
    LERP_TEST(VAR, VAR, UNI, VAR, (pi + 1), (     2), (.9 * pi));
    LERP_TEST(VAR, UNI, VAR, VAR, (     1), (pi + 2), (.9 * pi));
    LERP_TEST(VAR, UNI, UNI, VAR, (     1), (     2), (.9 * pi));
    LERP_TEST(VAR, VAR, VAR, UNI, (pi + 1), (pi + 2), (.9     ));
    LERP_TEST(VAR, VAR, UNI, UNI, (pi + 1), (     2), (.9     ));
    LERP_TEST(VAR, UNI, VAR, UNI, (     1), (pi + 2), (.9     ));
    LERP_TEST(UNI, UNI, UNI, UNI, (     1), (     2), (.9     ));

    return error;
}


//----------------------------------------------------------------------
// rad = deg2rad(deg)
//----------------------------------------------------------------------
inline uniform int
testDeg2rad()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    {
        uniform float f = 180.0;
        if (any(!isEqual(deg2rad(f), sPi))) {
            ++error;
        }
        varying float vf = 180.0 * pi;
        if (any(!isEqual(deg2rad(vf), pi * sPi))) {
            ++error;
        }
        uniform double d = 90.0;
        if (any(!isEqual(deg2rad(d), (uniform double) sHalfPi))) {
            ++error;
        }
        varying double vd = 90.0 * pi;
        if (any(!isEqual(deg2rad(vd), (varying double) pi * sHalfPi))) {
            ++error;
        }
    }

    return error;
}

//----------------------------------------------------------------------
// deg = rad2deg(deg)
//----------------------------------------------------------------------
inline uniform int
testRad2deg()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    {
        uniform float f = sPi;
        if (any(!isEqual(rad2deg(f), 180.0))) {
            ++error;
        }
        varying float vf = pi * sPi;;
        if (any(!isEqual(rad2deg(vf), pi * 180.0))) {
            ++error;
        }
    }

    return error;
}

//----------------------------------------------------------------------
// val = bias(val, biasVal)
//----------------------------------------------------------------------
inline uniform int
testBias()
{
    uniform int error = 0;
    const varying int pi = programIndex + 2;

    {
        const uniform float f = 15.f;
        if (any(!isEqual(bias(f, .5f), f))) {
            ++error;
        }
        if (any(!isEqual(bias(f, 0.f), f))) {
            ++error;
        }
        if (any(!isEqual(bias(f, 1.f), f))) {
            ++error;
        }
        if (any(bias(f, .75f) < f)) {
            ++error;
        }
        if (any(bias(f, .25f) > f)) {
            ++error;
        }

        const varying float vf = pi;
        const varying float vb = pi / (programCount * 4);
        if (any(!isEqual(bias(vf, .5f), vf))) {
            ++error;
        }
        if (any(!isEqual(bias(vf, 0.f), vf))) {
            ++error;
        }
        if (any(!isEqual(bias(vf, 1.f), vf))) {
            ++error;
        }
        if (any(bias(vf, .5f + vb) < vf)) {
            ++error;
        }
        if (any(bias(vf, .5f - vb) > vf)) {
            ++error;
        }
    }

    return error;
}

//----------------------------------------------------------------------
// val = gain(val, gainVal)
//----------------------------------------------------------------------
inline uniform int
testGain()
{
    uniform int error = 0;
    const varying int pi = programIndex + 2;

    {
        const uniform float f = 15.f;
        if (any(!isEqual(gain(f, .5f), f))) {
            ++error;
        }
        if (any(gain(f, .75f) > f)) {
            ++error;
        }
        if (any(gain(f, .25f) < f)) {
            ++error;
        }

        const varying float vf = pi;
        const varying float vb = pi / (programCount * 4);
        if (any(!isEqual(gain(vf, .5f), vf))) {
            ++error;
        }
        if (any(gain(vf, .5f + vb) > vf)) {
            ++error;
        }
        if (any(gain(vf, .5f - vb) < vf)) {
            ++error;
        }
    }

    return error;
}

//----------------------------------------------------------------------
// result = trunc(a)
//----------------------------------------------------------------------
#define TRUNC_TEST(VURES, VU0, V0, R0)            \
    {                                             \
        const VU0 float f0 = (VU0 float) V0;      \
        const VURES float res = (VURES float) R0; \
        if (any(!isEqual(trunc(f0), res))) {      \
            ++error;                              \
        }                                         \
    }

inline uniform int
testTrunc()
{
    uniform int error = 0;
    const varying int pi = programIndex;
    const uniform int maxPI = reduce_max(pi);
    const varying float frac = (float) pi / (uniform float) (maxPI + 1);

    const varying float vt = 3.0f + frac;
    const varying float vnt = -3.0f - frac;

    TRUNC_TEST(VAR, VAR,  3.0f + frac,  3.0f);
    TRUNC_TEST(VAR, VAR, -3.0f - frac, -3.0f);
    TRUNC_TEST(UNI, VAR,  3.0f + frac,  3.0f);
    TRUNC_TEST(UNI, VAR, -3.0f - frac, -3.0f);
    TRUNC_TEST(UNI, UNI,  3.2f,  3.0f);
    TRUNC_TEST(UNI, UNI, -3.2f, -3.0f);
    TRUNC_TEST(UNI, UNI,  3.7f,  3.0f);
    TRUNC_TEST(UNI, UNI, -3.7f, -3.0f);

    return error;
}

//----------------------------------------------------------------------
// result = fmod(a, b)
//----------------------------------------------------------------------
#define FMOD_TEST(VURES, VU0, VU1, V0, V1, R0)          \
    {                                                   \
        const VU0 float f0 = (VU0 float) V0;            \
        const VU1 float f1 = (VU1 float) V1;            \
        const VURES float res = (VURES float) R0;       \
        if (any(!isEqual(fmod(f0, f1), res))) {         \
            ++error;                                    \
        }                                               \
    }

inline uniform int
testFmod()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    FMOD_TEST(VAR, VAR, VAR, (pi + 1.25f), 1.0f, 0.25f);
    FMOD_TEST(VAR, VAR, VAR, -(pi + 1.25f), 1.0f, -0.25f);
    FMOD_TEST(VAR, VAR, UNI, 4.25f, 1.15f, 0.8f);
    FMOD_TEST(VAR, VAR, UNI, -4.25, 1.15f, -0.8f);
    FMOD_TEST(VAR, UNI, VAR, 3.0f, -2.0f, 1.0f);
    FMOD_TEST(VAR, UNI, VAR, -3.0f, -2.0f, -1.0f);
    FMOD_TEST(VAR, UNI, UNI, 6.0, 3.0f, 0.0f);
    FMOD_TEST(UNI, UNI, UNI, -6.30, 1.05, 0.0f);
    FMOD_TEST(UNI, UNI, UNI,  -1.8f, -16.4f, -1.8f);
    FMOD_TEST(UNI, UNI, UNI, -16.4f,  -1.8f, -0.2f);
    FMOD_TEST(UNI, UNI, UNI,  -1.8f, +16.4f, -1.8f);
    FMOD_TEST(UNI, UNI, UNI, -16.4f,  +1.8f, -0.2f);
    FMOD_TEST(UNI, UNI, UNI,  +1.8f, -16.4f, +1.8f);
    FMOD_TEST(UNI, UNI, UNI, +16.4f,  -1.8f, +0.2f);
    FMOD_TEST(UNI, UNI, UNI,  +1.8f, +16.4f, +1.8f);
    FMOD_TEST(UNI, UNI, UNI, +16.4f,  +1.8f, +0.2f);

    return error;
}

//----------------------------------------------------------------------
// val = saturate(val)
//----------------------------------------------------------------------
inline uniform int
testSaturate()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    {
        if (any(!isEqual(saturate(-2.5f), 0.0f))) {
            ++error;
        }
        if (any(!isEqual(saturate(5.0f), 1.0f))) {
            ++error;
        }
        if (any(!isEqual(saturate(0.33f), 0.33f))) {
            ++error;
        }

        const varying float vf = pi;
        const varying float vx = 1.0f/pi;
        if (any(!isEqual(saturate(vf), 1.0f))) {
            ++error;
        }
        if (any(!isEqual(saturate(-vf), 0.0f))) {
            ++error;
        }
        if (any(!isEqual(saturate(vx), vx))) {
            ++error;
        }
    }

    return error;
}

