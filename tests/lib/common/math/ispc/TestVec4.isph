// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file TestMathVec4.isph
#pragma once

#include <scene_rdl2/common/math/ispc/Vec4.isph>

#define VAR varying
#define UNI uniform

//----------------------------------------------------------------------
// Vec4x_ctor(x)
// Vec4x_ctor(x, x, x, x)
// Vec4x_ctor(x[])
//----------------------------------------------------------------------
#define VEC4_CTOR1_TEST(VURES, VUP0, P0)                                \
    {                                                                   \
        const VUP0 float f0 = P0;                                       \
        const VURES Vec4f v = Vec4f_ctor(f0);                           \
        if (any(v.x != f0) || any(v.y != f0) || any(v.z != f0) ||       \
            any(v.w != f0)) {                                           \
            ++error;                                                    \
        }                                                               \
    }


#define VEC4_CTOR4_TEST(VURES, VUP0, VUP1, VUP2, VUP3, P0, P1, P2, P3)  \
    {                                                                   \
        const VUP0 float f0 = P0;                                       \
        const VUP1 float f1 = P1;                                       \
        const VUP2 float f2 = P2;                                       \
        const VUP3 float f3 = P3;                                       \
        const VURES Vec4f v = Vec4f_ctor(f0, f1, f2, f3);               \
        if (any(v.x != f0) || any(v.y != f1) || any(v.z != f2) ||       \
            any(v.w != f3)) {                                           \
            ++error;                                                    \
        }                                                               \
    }

#define VEC4_CTOR_ARRAY_TEST(VURES, VUP, P0, P1, P2, P3)                \
    {                                                                   \
        const VUP float f0[] = { P0, P1, P2, P3 };                      \
        const VURES Vec4f v = Vec4f_ctor(f0);                           \
        if (any(v.x != f0[0]) || any(v.y != f0[1]) || any(v.z != f0[2]) || \
            any(v.w != f0[3])) {                                        \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testCtor()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    VEC4_CTOR1_TEST(VAR, VAR, (pi));
    VEC4_CTOR1_TEST(UNI, UNI, (1));

    VEC4_CTOR4_TEST(VAR, VAR, VAR, VAR, VAR, (pi), (pi + 1), (pi + 2), (pi + 3));
    VEC4_CTOR4_TEST(VAR, VAR, VAR, VAR, UNI, (pi), (pi + 1), (pi + 2), (3));
    VEC4_CTOR4_TEST(VAR, VAR, VAR, UNI, VAR, (pi), (pi + 1), (2), (pi + 3));
    VEC4_CTOR4_TEST(VAR, VAR, VAR, UNI, UNI, (pi), (pi + 1), (2), (3));
    VEC4_CTOR4_TEST(VAR, VAR, UNI, VAR, VAR, (pi), (1), (pi + 2), (pi + 3));
    VEC4_CTOR4_TEST(VAR, VAR, UNI, VAR, UNI, (pi), (1), (pi + 2), (3));
    VEC4_CTOR4_TEST(VAR, VAR, UNI, UNI, VAR, (pi), (1), (2), (pi + 3));
    VEC4_CTOR4_TEST(VAR, VAR, UNI, UNI, UNI, (pi), (1), (2), (3));
    VEC4_CTOR4_TEST(VAR, UNI, VAR, VAR, VAR, (0), (pi + 1), (pi + 2), (pi + 3));
    VEC4_CTOR4_TEST(VAR, UNI, VAR, VAR, UNI, (0), (pi + 1), (pi + 2), (3));
    VEC4_CTOR4_TEST(VAR, UNI, VAR, UNI, VAR, (0), (pi + 1), (2), (pi + 3));
    VEC4_CTOR4_TEST(VAR, UNI, VAR, UNI, UNI, (0), (pi + 1), (2), (3));
    VEC4_CTOR4_TEST(VAR, UNI, UNI, VAR, VAR, (0), (1), (pi + 2), (pi + 3));
    VEC4_CTOR4_TEST(VAR, UNI, UNI, VAR, UNI, (0), (1), (pi + 2), (3));
    VEC4_CTOR4_TEST(VAR, UNI, UNI, UNI, VAR, (0), (1), (2), (pi + 3));
    VEC4_CTOR4_TEST(UNI, UNI, UNI, UNI, UNI, (0), (1), (2), (3));

    VEC4_CTOR_ARRAY_TEST(VAR, VAR, (pi), (pi + 1), (pi + 2), (pi + 3));
    VEC4_CTOR_ARRAY_TEST(UNI, UNI, (0), (1), (2), (3));

    return error;
}

//----------------------------------------------------------------------
// Vec4x OP Vec4x (+, -, *, /)
//----------------------------------------------------------------------
#define VEC4_OP_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W, OP) \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), \
                                         (VUP0 float) (P0Z), (VUP0 float) (P0W)); \
        const VUP1 Vec4f v1 = Vec4f_ctor((VUP1 float) (P1X), (VUP1 float) (P1Y), \
                                         (VUP1 float) (P1Z), (VUP1 float) (P1W)); \
        const VURES Vec4f v = v0 OP v1;                                 \
        if (any(v.x != ((VUP0 float) (P0X) OP (VUP1 float) (P1X))) ||   \
            any(v.y != ((VUP0 float) (P0Y) OP (VUP1 float) (P1Y))) ||   \
            any(v.z != ((VUP0 float) (P0Z) OP (VUP1 float) (P1Z))) ||   \
            any(v.w != ((VUP0 float) (P0W) OP (VUP1 float) (P1W)))) {   \
            ++error;                                                    \
        }                                                               \
    }

//----------------------------------------------------------------------
// Vec4x = Vec4x + Vec4x
//----------------------------------------------------------------------
#define VEC4_PLUS_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W) \
    VEC4_OP_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W, +)

inline uniform int
testPlus()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    VEC4_PLUS_TEST(VAR, VAR, VAR, (pi), (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 5), (pi + 6), (pi + 7));
    VEC4_PLUS_TEST(VAR, VAR, UNI, (pi), (pi + 1), (pi + 2), (pi + 3), (4), (5), (6), (7));
    VEC4_PLUS_TEST(VAR, UNI, VAR, (0), (1), (2), (3), (pi + 4), (pi + 5), (pi + 6), (pi + 7));
    VEC4_PLUS_TEST(UNI, UNI, UNI, (0), (1), (2), (3), (4), (5), (6), (7));

    return error;
}

//----------------------------------------------------------------------
// Vec4x = Vec4x - Vec4x
//----------------------------------------------------------------------
#define VEC4_MINUS_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W) \
    VEC4_OP_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W, -)

inline uniform int
testMinus()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    VEC4_MINUS_TEST(VAR, VAR, VAR, (pi), (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 5), (pi + 6), (pi + 7));
    VEC4_MINUS_TEST(VAR, VAR, UNI, (pi), (pi + 1), (pi + 2), (pi + 3), (4), (5), (6), (7));
    VEC4_MINUS_TEST(VAR, UNI, VAR, (0), (1), (2), (3), (pi + 4), (pi + 5), (pi + 6), (pi + 7));
    VEC4_MINUS_TEST(UNI, UNI, UNI, (0), (1), (2), (3), (4), (5), (6), (7));

    return error;
}

//----------------------------------------------------------------------
// Vec4x = Scalar OP Vec4x (*, /)
//----------------------------------------------------------------------
#define VEC4_SCALAR_PRE_OP_TEST(VURES, VUP0, VUP1, P0, P1X, P1Y, P1Z, P1W, OP) \
    {                                                                   \
        const VUP0 float f0 = (P0);                                     \
        const VUP1 Vec4f v1 = Vec4f_ctor((VUP1 float) (P1X), (VUP1 float) (P1Y), (VUP1 float) (P1Z), \
                                         (VUP1 float) (P1W));           \
        const VURES Vec4f v = f0 OP v1;                                 \
        if (any(v.x != ((VUP0 float) (P0) OP (VUP1 float) (P1X))) ||    \
            any(v.y != ((VUP0 float) (P0) OP (VUP1 float) (P1Y))) ||    \
            any(v.z != ((VUP0 float) (P0) OP (VUP1 float) (P1Z))) ||    \
            any(v.w != ((VUP0 float) (P0) OP (VUP1 float) (P1W)))) {    \
            ++error;                                                    \
        }                                                               \
    }

// ----------------------------------------------------------------------
// Vec4x = x * Vec4x
// ---------------------------------------------------------------------
#define VEC4_SCALAR_PRE_MULT_TEST(VURES, VUP0, VUP1, P0, P1X, P1Y, P1Z, P1W) \
    VEC4_SCALAR_PRE_OP_TEST(VURES, VUP0, VUP1, P0, P1X, P1Y, P1Z, P1W, *)


inline uniform int
testScalarPreMult()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    VEC4_SCALAR_PRE_MULT_TEST(VAR, VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 5));
    VEC4_SCALAR_PRE_MULT_TEST(VAR, VAR, UNI, (pi + 1), (2), (3), (4), (5));
    VEC4_SCALAR_PRE_MULT_TEST(VAR, UNI, VAR, (1), (pi + 2), (pi + 3), (pi + 4), (pi + 5));
    VEC4_SCALAR_PRE_MULT_TEST(UNI, UNI, UNI, (1), (2), (3), (4), (5));
    return error;
}

//----------------------------------------------------------------------
// Vec4x = Vec4x OP Scalar (*, /)
//----------------------------------------------------------------------
#define VEC4_SCALAR_POST_OP_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1, OP) \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), (VUP0 float) (P0Z), \
                                         (VUP0 float) (P0W));           \
        const VUP1 float f1 = (P1);                                     \
        const VURES Vec4f v = v0 OP f1;                                 \
        if (any(v.x != ((VUP0 float) (P0X) OP (VUP1 float) (P1))) ||    \
            any(v.y != ((VUP0 float) (P0Y) OP (VUP1 float) (P1))) ||    \
            any(v.z != ((VUP0 float) (P0Z) OP (VUP1 float) (P1))) ||    \
            any(v.w != ((VUP0 float) (P0W) OP (VUP1 float) (P1)))) {    \
            ++error;                                                    \
        }                                                               \
    }

// ---------------------------------------------------------------------
// Vec4x = Vec4x * x
// ---------------------------------------------------------------------
#define VEC4_SCALAR_POST_MULT_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1) \
    VEC4_SCALAR_POST_OP_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1, *)

inline uniform int
testScalarPostMult()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    VEC4_SCALAR_POST_MULT_TEST(VAR, VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 5));
    VEC4_SCALAR_POST_MULT_TEST(VAR, VAR, UNI, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (5));
    VEC4_SCALAR_POST_MULT_TEST(VAR, UNI, VAR, (1), (2), (3), (4), (pi + 5));
    VEC4_SCALAR_POST_MULT_TEST(UNI, UNI, UNI, (1), (2), (3), (4), (5));

    return error;
}

// ---------------------------------------------------------------------
// Vec4x = Vec4x * Vec4x
// ---------------------------------------------------------------------
#define VEC4_MULT_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W) \
    VEC4_OP_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W, *)

inline uniform int
testMult()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    VEC4_MULT_TEST(VAR, VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 5), (pi + 6), (pi + 7), (pi + 8));
    VEC4_MULT_TEST(VAR, VAR, UNI, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (5), (6), (7), (8));
    VEC4_MULT_TEST(VAR, UNI, VAR, (1), (2), (3), (4), (pi + 5), (pi + 6), (pi + 7), (pi + 8));
    VEC4_MULT_TEST(UNI, UNI, UNI, (1), (2), (3), (4), (5), (6), (7), (8));

    return error;
}

// ---------------------------------------------------------------------
// Vec4x = x / Vec4x
// ---------------------------------------------------------------------
#define VEC4_SCALAR_PRE_DIV_TEST(VURES, VUP0, VUP1, P0, P1X, P1Y, P1Z, P1W) \
    VEC4_SCALAR_PRE_OP_TEST(VURES, VUP0, VUP1, P0, P1X, P1Y, P1Z, P1W, /)

inline uniform int
testScalarPreDiv()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    VEC4_SCALAR_PRE_DIV_TEST(VAR, VAR, VAR, (pi * 256), (pi * 2), (pi * 4), (pi * 8), (pi * 16));
    VEC4_SCALAR_PRE_DIV_TEST(VAR, VAR, UNI, (pi * 256), (2), (4), (8), (16));
    VEC4_SCALAR_PRE_DIV_TEST(VAR, UNI, VAR, (256), (pi * 2), (pi * 4), (pi * 8), (pi * 16));
    VEC4_SCALAR_PRE_DIV_TEST(UNI, UNI, UNI, (256), (2), (4), (8), (16));

    return error;
}

// ---------------------------------------------------------------------
// Vec4x = Vec4x / x
// ---------------------------------------------------------------------
#define VEC4_SCALAR_POST_DIV_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1) \
    VEC4_SCALAR_POST_OP_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1, /)

inline uniform int
testScalarPostDiv()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    VEC4_SCALAR_POST_DIV_TEST(VAR, VAR, VAR, (pi * 256), (pi * 128), (pi * 64), (pi * 32), (pi * 2));
    VEC4_SCALAR_POST_DIV_TEST(VAR, VAR, UNI, (pi * 256), (pi * 128), (pi * 64), (pi * 32), (2));
    VEC4_SCALAR_POST_DIV_TEST(VAR, UNI, VAR, (256), (128), (64), (32), (pi * 2));
    VEC4_SCALAR_POST_DIV_TEST(UNI, UNI, UNI, (256), (128), (64), (32), (2));

    return error;
}

// ---------------------------------------------------------------------
// Vec4x = Vec4x / Vec4x
// ---------------------------------------------------------------------
#define VEC4_DIV_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W) \
    VEC4_OP_TEST(VURES, VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W, /)

inline uniform int
testDiv()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    VEC4_DIV_TEST(VAR, VAR, VAR, (pi * 256), (pi * 128), (pi * 64), (pi * 32), (pi * 2), (pi * 4), (pi * 8), (pi * 16));
    VEC4_DIV_TEST(VAR, VAR, UNI, (pi * 256), (pi * 128), (pi * 64), (pi * 32), (2), (4), (8), (16));
    VEC4_DIV_TEST(VAR, UNI, VAR, (256), (128), (64), (32), (pi * 2), (pi * 4), (pi * 8), (pi * 16));
    VEC4_DIV_TEST(UNI, UNI, UNI, (256), (128), (64), (32), (2), (4), (8), (16));

    return error;
}

// ---------------------------------------------------------------------
// bool = isEqual(Vec4x, Vec4x)
// ---------------------------------------------------------------------
#define VEC4_IS_EQUAL_TEST(VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W, R0) \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), (VUP0 float) (P0Z), \
                                         (VUP0 float) (P0W));           \
        const VUP1 Vec4f v1 = Vec4f_ctor((VUP1 float) (P1X), (VUP1 float) (P1Y), (VUP1 float) (P1Z), \
                                         (VUP1 float) (P1W));           \
        if (any(isEqual(v0, v1) != R0)) {                               \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testIsEqual()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    VEC4_IS_EQUAL_TEST(VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4), true);
    VEC4_IS_EQUAL_TEST(VAR, UNI, (1), (2), (3), (4), (1), (2), (3), (4), true);
    VEC4_IS_EQUAL_TEST(UNI, VAR, (1), (2), (3), (4), (1), (2), (3), (4), true);
    VEC4_IS_EQUAL_TEST(UNI, UNI, (1), (2), (3), (4), (1), (2), (3), (4), true);

    VEC4_IS_EQUAL_TEST(VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 4), (pi + 3), (pi + 2), (pi + 1), false);
    VEC4_IS_EQUAL_TEST(VAR, UNI, (pi + 4), (pi + 5), (pi + 6), (pi + 7), (1), (2), (3), (4), false);
    VEC4_IS_EQUAL_TEST(UNI, VAR, (1), (2), (3), (4), (pi + 4), (pi + 5), (pi + 6), (7), false);
    VEC4_IS_EQUAL_TEST(UNI, UNI, (1), (2), (3), (4), (4), (3), (2), (1), false);

    return error;
}

// ---------------------------------------------------------------------
// bool = isEqualFixedEps(Vec4x, Vec4x)
// ---------------------------------------------------------------------
#define VEC4_IS_EQUAL_FIXED_EPS_TEST(VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W, R0) \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), (VUP0 float) (P0Z), \
                                         (VUP0 float) (P0W));           \
        const VUP1 Vec4f v1 = Vec4f_ctor((VUP1 float) (P1X), (VUP1 float) (P1Y), (VUP1 float) (P1Z), \
                                         (VUP1 float) (P1W));           \
        if (any(isEqualFixedEps(v0, v1) != R0)) {                       \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testIsEqualFixedEps()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    VEC4_IS_EQUAL_FIXED_EPS_TEST(VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4), true);
    VEC4_IS_EQUAL_FIXED_EPS_TEST(VAR, UNI, (1), (2), (3), (4), (1), (2), (3), (4), true);
    VEC4_IS_EQUAL_FIXED_EPS_TEST(UNI, VAR, (1), (2), (3), (4), (1), (2), (3), (4), true);
    VEC4_IS_EQUAL_FIXED_EPS_TEST(UNI, UNI, (1), (2), (3), (4), (1), (2), (3), (4), true);

    VEC4_IS_EQUAL_FIXED_EPS_TEST(VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 4), (pi + 3), (pi + 2), (pi + 1), false);
    VEC4_IS_EQUAL_FIXED_EPS_TEST(VAR, UNI, (pi + 4), (pi + 5), (pi + 6), (pi + 7), (1), (2), (3), (4), false);
    VEC4_IS_EQUAL_FIXED_EPS_TEST(UNI, VAR, (1), (2), (3), (4), (pi + 4), (pi + 5), (pi + 6), (7), false);
    VEC4_IS_EQUAL_FIXED_EPS_TEST(UNI, UNI, (1), (2), (3), (4), (4), (3), (2), (1), false);

    return error;
}

// ---------------------------------------------------------------------
// bool = isZero(Vec4x)
// ---------------------------------------------------------------------
#define VEC4_IS_ZERO_TEST(VUP0, P0X, P0Y, P0Z, P0W, R0)                 \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), \
                                         (VUP0 float) (P0Z), (VUP0 float) (P0W)); \
        if (any(isZero(v0) != R0)) {                                    \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testIsZero()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    VEC4_IS_ZERO_TEST(VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), false);
    VEC4_IS_ZERO_TEST(VAR, ((pi + 1) * 0.0f), ((pi + 2) * 0.0f), (pi - pi), (pi / 1e9f), true);
    VEC4_IS_ZERO_TEST(UNI, (0.1), (-0.1), (0.3), (-0.2), false);
    VEC4_IS_ZERO_TEST(UNI, (0.0000001), (-0.0000001), (0.0000002), (-0.0000002), true);

    return error;
}

// ---------------------------------------------------------------------
// x = dot(Vec4x, Vec4x) dot product
// ---------------------------------------------------------------------
#define VEC4_DOT_TEST(VUP0, VUP1, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W, R0) \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), (VUP0 float) (P0Z), \
                                         (VUP0 float) (P0W));           \
        const VUP1 Vec4f v1 = Vec4f_ctor((VUP1 float) (P1X), (VUP1 float) (P1Y), (VUP1 float) (P1Z), \
                                         (VUP1 float) (P1W));           \
        if (any(dot(v0, v1) != R0)) {                                   \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testDot()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    VEC4_DOT_TEST(VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 5), (pi + 6), (pi + 7), (pi + 8), (4 * pi * pi + 36 * pi + 70));
    VEC4_DOT_TEST(VAR, UNI, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (5), (6), (7), (8), (26 * pi + 70));
    VEC4_DOT_TEST(UNI, VAR, (1), (2), (3), (4), (pi + 5), (pi + 6), (pi + 7), (pi + 8), (10 * pi + 70));
    VEC4_DOT_TEST(UNI, UNI, (1), (2), (3), (4), (5), (6), (7), (8), (70));

    return error;
}

// ---------------------------------------------------------------------
// x = length(Vec4x) euclidean length
// ---------------------------------------------------------------------
#define VEC4_LENGTH_TEST(VUP0, P0X, P0Y, P0Z, P0W, R0)                  \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), (VUP0 float) (P0Z), \
                                         (VUP0 float) (P0W));           \
        const VUP0 float r0 = (VUP0 float) sqrt((VUP0 float) (R0));     \
        if (any(isEqual(length(v0), r0) == false)) {                    \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testLength()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    VEC4_LENGTH_TEST(VAR, (2 * pi), (3 * pi), (4 * pi), (5 * pi), (54 * pi * pi));
    VEC4_LENGTH_TEST(UNI, (2), (3), (4), (5), (54));

    return error;
}

// ---------------------------------------------------------------------
// x = lengthSqr(Vec4x) euclidean length squared
// ---------------------------------------------------------------------
#define VEC4_LENGTH_SQR_TEST(VUP0, P0X, P0Y, P0Z, P0W, R0)              \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), (VUP0 float) (P0Z), \
                                         (VUP0 float) (P0W));           \
        const VUP0 float r0 = (VUP0 float) (R0);                        \
        if (any(isEqual(lengthSqr(v0), r0) == false)) {                 \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testLengthSqr()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    VEC4_LENGTH_SQR_TEST(VAR, (2 * pi), (3 * pi), (4 * pi), (5 * pi), (54 * pi * pi));
    VEC4_LENGTH_SQR_TEST(UNI, (2), (3), (4), (5), (54));

    return error;
}

// ---------------------------------------------------------------------
// Vec4x = normalize(Vec4x) - normalize a vector
// ---------------------------------------------------------------------
#define VEC4_NORMALIZE_TEST(VUP0, P0X, P0Y, P0Z, P0W)                   \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), (VUP0 float) (P0Z), \
                                         (VUP0 float) (P0W));           \
        const VUP0 Vec4f nv0 = normalize(v0);                           \
        if (any(isNormalized(nv0) == false)) {                          \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testNormalize()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    VEC4_NORMALIZE_TEST(VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_NORMALIZE_TEST(UNI, (1), (2), (3), (4));

    return error;
}

// ---------------------------------------------------------------------
// Vec4x = abs(Vec4x)
// ---------------------------------------------------------------------
#define VEC4_ABS_TEST(VUP0, P0X, P0Y, P0Z, P0W, R0X, R0Y, R0Z, R0W)     \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), (VUP0 float) (P0Z), \
                                         (VUP0 float) (P0W));           \
        const VUP0 Vec4f r0 = Vec4f_ctor((VUP0 float) (R0X), (VUP0 float) (R0Y), (VUP0 float) (R0Z), \
                                         (VUP0 float) (R0W));           \
        const VUP0 Vec4f absV0 = abs(v0);                               \
        if (any(isEqual(absV0, r0) == false)) {                         \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testAbs()
{
    uniform int error = 0;
    const int varying pi = programIndex;

    VEC4_ABS_TEST(VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (-pi - 1), (pi + 2), (pi + 3), (pi + 4), (pi + 1) ,(pi + 2),(pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (pi + 1), (-pi - 2), (pi + 3), (pi + 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (-pi - 1), (-pi - 2), (pi + 3), (pi + 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (pi + 1), (pi + 2), (-pi - 3), (pi + 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (-pi - 1), (pi + 2), (-pi - 3), (pi + 4), (pi + 1) ,(pi + 2),(pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (pi + 1), (-pi - 2), (-pi - 3), (pi + 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (-pi - 1), (-pi - 2), (-pi - 3), (pi + 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (pi + 1), (pi + 2), (pi + 3), (-pi - 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (-pi - 1), (pi + 2), (pi + 3), (-pi - 4), (pi + 1) ,(pi + 2),(pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (pi + 1), (-pi - 2), (pi + 3), (-pi - 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (-pi - 1), (-pi - 2), (pi + 3), (-pi - 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (pi + 1), (pi + 2), (-pi - 3), (-pi - 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (-pi - 1), (pi + 2), (-pi - 3), (-pi - 4), (pi + 1) ,(pi + 2),(pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (pi + 1), (-pi - 2), (-pi - 3), (-pi - 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    VEC4_ABS_TEST(VAR, (-pi - 1), (-pi - 2), (-pi - 3), (-pi - 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4));

    VEC4_ABS_TEST(UNI, (1), (2), (3), (4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (-1), (2), (3), (4), (1) ,(2), (3), (4));
    VEC4_ABS_TEST(UNI, (1), (-2), (3), (4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (-1), (-2), (3), (4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (1), (2), (-3), (4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (-1), (2), (-3), (4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (1), (-2), (-3), (4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (-1), (-2), (-3), (4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (1), (2), (3), (-4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (-1), (2), (3), (-4), (1) ,(2), (3), (4));
    VEC4_ABS_TEST(UNI, (1), (-2), (3), (-4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (-1), (-2), (3), (-4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (1), (2), (-3), (-4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (-1), (2), (-3), (-4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (1), (-2), (-3), (-4), (1), (2), (3), (4));
    VEC4_ABS_TEST(UNI, (-1), (-2), (-3), (-4), (1), (2), (3), (4));


    return error;
}

// ---------------------------------------------------------------------
// Vec4x = neg(Vec4x) : -v
// ---------------------------------------------------------------------
#define VEC4_NEG_TEST(VUP0, P0X, P0Y, P0Z, P0W)                         \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), (VUP0 float) (P0Z), (VUP0 float) (P0W)); \
        const VUP0 Vec4f negV0 = neg(v0);                               \
        if (any(!isEqual(negV0.x, -v0.x)) ||                            \
            any(!isEqual(negV0.y, -v0.y)) ||                            \
            any(!isEqual(negV0.z, -v0.z)) ||                            \
            any(!isEqual(negV0.w, -v0.w))) {                            \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testNeg()
{
    uniform int error = 0;
    const int varying pi = programIndex + 1;

    VEC4_NEG_TEST(VAR, (pi * 2), (pi * 4), (pi * 8), (pi * 16));
    VEC4_NEG_TEST(UNI, (2), (4), (8), (16));

    return error;
}


// ---------------------------------------------------------------------
// Vec4x = rcp(Vec4x) : 1 / v
// ---------------------------------------------------------------------
#define VEC4_RCP_TEST(VUP0, P0X, P0Y, P0Z, P0W, R0X, R0Y, R0Z, R0W)     \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), (VUP0 float) (P0Z), \
                                         (VUP0 float) (P0W));           \
        const VUP0 Vec4f r0 = Vec4f_ctor((VUP0 float) (R0X), (VUP0 float) (R0Y), (VUP0 float) (R0Z), \
                                         (VUP0 float) (R0W));           \
        const VUP0 Vec4f rcpV0 = rcp(v0);                               \
        if (any(!isEqual(rcpV0, r0))) {                                 \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testRcp()
{
    uniform int error = 0;
    const int varying pi = programIndex + 1;

    VEC4_RCP_TEST(VAR, (pi * 2), (pi * 4), (pi * 8), (pi * 16), (1. / (2. * pi)), (1. / (4. * pi)), (1. / (8. * pi)), (1. / (16. * pi)));
    VEC4_RCP_TEST(UNI, (2), (4), (8), (16), (.5), (.25), (.125), (0.0625));

    return error;
}

// ---------------------------------------------------------------------
// bool = isNormalized(Vec4) : is Vec4 a unit vector?
// ---------------------------------------------------------------------
#define VEC4_IS_NORMALIZED_TEST(VUP0, P0X, P0Y, P0Z, P0W, R0)           \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), (VUP0 float) (P0Z), \
                                         (VUP0 float) (P0W));           \
        if (any(isNormalized(v0) != R0)) {                              \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testIsNormalized()
{
    uniform int error = 0;
    const int varying pi = programIndex;

    VEC4_IS_NORMALIZED_TEST(VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), false);
    VEC4_IS_NORMALIZED_TEST(VAR, (sqrt(.25)), (sqrt(.25)), (sqrt(.25)), sqrt(.25), true);
    VEC4_IS_NORMALIZED_TEST(UNI, (0), (1), (0), (0), true);
    VEC4_IS_NORMALIZED_TEST(UNI, (1), (1), (0), (1), false);

    return error;
}


//----------------------------------------------------------------------
// Vec4x = lerp(Vec4x, Vec4x, x)
//----------------------------------------------------------------------
#define VEC4_LERP_TEST(VURES, VUP0, VUP1, VUP2, P0X, P0Y, P0Z, P0W, P1X, P1Y, P1Z, P1W, P2, R0X, R0Y, R0Z, R0W) \
    {                                                                   \
        const VUP0 Vec4f v0 = Vec4f_ctor((VUP0 float) (P0X), (VUP0 float) (P0Y), \
                                         (VUP0 float) (P0Z), (VUP0 float) (P0W)); \
        const VUP1 Vec4f v1 = Vec4f_ctor((VUP1 float) (P1X), (VUP1 float) (P1Y), \
                                         (VUP1 float) (P1Z), (VUP1 float) (P1W)); \
        const VUP2 float f = (VUP2 float) (P2);                         \
        const VURES Vec4f res = lerp(v0, v1, f);                        \
        if (any(!isEqual(res.x, (VURES float) (R0X))) ||                \
            any(!isEqual(res.y, (VURES float) (R0Y))) ||                \
            any(!isEqual(res.z, (VURES float) (R0Z))) ||                \
            any(!isEqual(res.w, (VURES float) (R0W)))) {                \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testLerp()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    VEC4_LERP_TEST(VAR, VAR, VAR, VAR,
                   (pi), (2*pi), (3*pi), (4*pi),
                   (pi + 1), (2*pi + 1), (3*pi + 1), (4*pi + 1),
                   (pi / 64.),
                   ((1. - (pi / 64.)) * (pi) + (pi / 64.) * (pi + 1)),
                   ((1. - (pi / 64.)) * (2*pi) + (pi / 64.) * (2*pi + 1)),
                   ((1. - (pi / 64.)) * (3*pi) + (pi / 64.) * (3*pi + 1)),
                   ((1. - (pi / 64.)) * (4*pi) + (pi / 64.) * (4*pi + 1)));
    VEC4_LERP_TEST(VAR, VAR, VAR, UNI,
                   (pi), (2*pi), (3*pi), (4*pi),
                   (pi + 1), (2*pi + 1), (3*pi + 1), (4*pi + 1),
                   (1. / 64.),
                   ((1. - (1. / 64.)) * (pi) + (1. / 64.) * (pi + 1)),
                   ((1. - (1. / 64.)) * (2*pi) + (1. / 64.) * (2*pi + 1)),
                   ((1. - (1. / 64.)) * (3*pi) + (1. / 64.) * (3*pi + 1)),
                   ((1. - (1. / 64.)) * (4*pi) + (1. / 64.) * (4*pi + 1)));
    VEC4_LERP_TEST(VAR, VAR, UNI, VAR,
                   (pi), (2*pi), (3*pi), (4*pi),
                   (1), (1), (1), (1),
                   (pi / 64.),
                   ((1. - (pi / 64.)) * (pi) + (pi / 64.) * (1)),
                   ((1. - (pi / 64.)) * (2*pi) + (pi / 64.) * (1)),
                   ((1. - (pi / 64.)) * (3*pi) + (pi / 64.) * (1)),
                   ((1. - (pi / 64.)) * (4*pi) + (pi / 64.) * (1)));
    VEC4_LERP_TEST(VAR, VAR, UNI, UNI,
                   (pi), (2*pi), (3*pi), (4*pi),
                   (1), (1), (1), (1),
                   (1. / 64.),
                   ((1. - (1. / 64.)) * pi + (1. / 64.) * (1)),
                   ((1. - (1. / 64.)) * (2*pi) + (1. / 64.) * (1)),
                   ((1. - (1. / 64.)) * (3*pi) + (1. / 64.) * (1)),
                   ((1. - (1. / 64.)) * (4*pi) + (1. / 64.) * (1)));
    VEC4_LERP_TEST(VAR, UNI, VAR, VAR,
                   (1), (2), (3), (4),
                   (pi + 1), (2*pi + 1), (3*pi + 1), (4*pi + 1),
                   (pi / 64.),
                   ((1. - (pi / 64.)) * (1) + (pi / 64.) * (pi + 1)),
                   ((1. - (pi / 64.)) * (2) + (pi / 64.) * (2*pi + 1)),
                   ((1. - (pi / 64.)) * (3) + (pi / 64.) * (3*pi + 1)),
                   ((1. - (pi / 64.)) * (4) + (pi / 64.) * (4*pi + 1)));
    VEC4_LERP_TEST(VAR, UNI, VAR, UNI,
                   (1), (2), (3), (4),
                   (pi + 1), (2*pi + 1), (3*pi + 1), (4*pi + 1),
                   (1. / 64.),
                   ((1. - (1. / 64.)) * (1) + (1. / 64.) * (pi + 1)),
                   ((1. - (1. / 64.)) * (2) + (1. / 64.) * (2*pi + 1)),
                   ((1. - (1. / 64.)) * (3) + (1. / 64.) * (3*pi + 1)),
                   ((1. - (1. / 64.)) * (4) + (1. / 64.) * (4*pi + 1)));
    VEC4_LERP_TEST(VAR, UNI, UNI, VAR,
                   (1), (2), (3), (4),
                   (1), (1), (1), (1),
                   (pi / 64.),
                   ((1. - (pi / 64.)) * (1) + (pi / 64.) * (1)),
                   ((1. - (pi / 64.)) * (2) + (pi / 64.) * (1)),
                   ((1. - (pi / 64.)) * (3) + (pi / 64.) * (1)),
                   ((1. - (pi / 64.)) * (4) + (pi / 64.) * (1)));
    VEC4_LERP_TEST(UNI, UNI, UNI, UNI,
                   (1), (2), (3), (4),
                   (1), (1), (1), (1),
                   (1. / 64.),
                   ((1. - (1. / 64.)) * (1) + (1. / 64.) * (1)),
                   ((1. - (1. / 64.)) * (2) + (1. / 64.) * (1)),
                   ((1. - (1. / 64.)) * (3) + (1. / 64.) * (1)),
                   ((1. - (1. / 64.)) * (4) + (1. / 64.) * (1)));
    return error;
}

