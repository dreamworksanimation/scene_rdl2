// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file TestMathCol4.isph
#pragma once

#include <scene_rdl2/common/math/ispc/Col4.isph>
#include <scene_rdl2/common/math/ispc/Math.isph>

#define VAR varying
#define UNI uniform

//----------------------------------------------------------------------
// Col4x_ctor(x)
// Col4c_ctor(x, x, x, x)
//----------------------------------------------------------------------
#define COL4_CTOR1_TEST(VUC, VU0, V0)                                   \
    {                                                                   \
        const VU0 float f0 = (VU0 float) V0;                            \
        const VUC Col4f c = Col4f_ctor(f0);                             \
        if (any(c.r != f0) || any(c.g != f0) || any(c.b != f0) || any(c.a != f0)) { \
            ++error;                                                    \
        }                                                               \
    }

#define COL4_CTOR4_TEST(VUC, VU0, VU1, VU2, VU3, V0, V1, V2, V3)        \
    {                                                                   \
        const VU0 float f0 = (VU0 float) V0;                            \
        const VU1 float f1 = (VU1 float) V1;                            \
        const VU2 float f2 = (VU2 float) V2;                            \
        const VU3 float f3 = (VU3 float) V3;                            \
        const VUC Col4f c = Col4f_ctor(f0, f1, f2, f3);                 \
        if (any(c.r != f0) || any(c.g != f1) || any(c.b != f2) || any(c.a != f3)) { \
            ++error;                                                    \
        }                                                               \
    }

#define COL4_CTOR_ARRAY_TEST(VUC, VU0, V0, V1, V2, V3)                  \
    {                                                                   \
        const VU0 float f0[] = { V0, V1, V2, V3 };                      \
        const VUC Col4f c = Col4f_ctor(f0);                             \
        if (any(c.r != f0[0]) || any(c.g != f0[1]) || any(c.b != f0[2]) || \
            any(c.a != f0[3])) {                                        \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testCtor()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    COL4_CTOR1_TEST(VAR, VAR, (pi));
    COL4_CTOR1_TEST(UNI, UNI, (1));

    COL4_CTOR4_TEST(VAR, VAR, VAR, VAR, VAR, (pi), (pi+1), (pi+2), (pi+3));
    COL4_CTOR4_TEST(VAR, VAR, VAR, VAR, UNI, (pi), (pi+1), (pi+2), (3));
    COL4_CTOR4_TEST(VAR, VAR, VAR, UNI, VAR, (pi), (pi+1), (2), (pi+3));
    COL4_CTOR4_TEST(VAR, VAR, VAR, UNI, UNI, (pi), (pi+1), (2), (3));
    COL4_CTOR4_TEST(VAR, VAR, UNI, VAR, VAR, (pi), (1), (pi+2), (pi+3));
    COL4_CTOR4_TEST(VAR, VAR, UNI, VAR, UNI, (pi), (1), (pi+2), (3));
    COL4_CTOR4_TEST(VAR, VAR, UNI, UNI, VAR, (pi), (1), (2), (pi+3));
    COL4_CTOR4_TEST(VAR, VAR, UNI, UNI, UNI, (pi), (1), (2), (3));
    COL4_CTOR4_TEST(VAR, UNI, VAR, VAR, VAR, (0), (pi+1), (pi+2), (pi+3));
    COL4_CTOR4_TEST(VAR, UNI, VAR, VAR, UNI, (0), (pi+1), (pi+2), (3));
    COL4_CTOR4_TEST(VAR, UNI, VAR, UNI, VAR, (0), (pi+1), (2), (pi+3));
    COL4_CTOR4_TEST(VAR, UNI, VAR, UNI, UNI, (0), (pi+1), (2), (3));
    COL4_CTOR4_TEST(VAR, UNI, UNI, VAR, VAR, (0), (1), (pi+2), (pi+3));
    COL4_CTOR4_TEST(VAR, UNI, UNI, VAR, UNI, (0), (1), (pi+2), (3));
    COL4_CTOR4_TEST(VAR, UNI, UNI, UNI, VAR, (0), (1), (2), (pi+3));
    COL4_CTOR4_TEST(UNI, UNI, UNI, UNI, UNI, (0), (1), (2), (3));

    COL4_CTOR_ARRAY_TEST(VAR, VAR, (pi), (pi + 1), (pi + 2), (pi + 3));
    COL4_CTOR_ARRAY_TEST(UNI, UNI, (0), (1), (2), (3));

    return error;
}

//----------------------------------------------------------------------
// Col4x_clamp(c)
//----------------------------------------------------------------------
#define COL4_CLAMP_TEST(VU0, V0R, V0G, V0B, V0A, R0R, R0G, R0B, R0A)    \
    {                                                      \
        const VU0 Col4f c = Col4f_ctor((VU0 float) (V0R), (VU0 float) (V0G), (VU0 float) (V0B), \
                                       (VU0 float) (V0A));              \
        const VU0 Col4f r = clamp(c, 0.f, 1.f);                         \
        if (any(r.r != R0R) || any(r.g != R0G) || any(r.b != R0B) ||    \
            any(r.a != R0A)) {                                          \
            ++error;                                                    \
        }                                                               \
    }


inline uniform int
testClamp()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    COL4_CLAMP_TEST(VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (1), (1), (1), (1));
    COL4_CLAMP_TEST(VAR, (pi - 10), (pi -11), (pi - 12), (pi - 13), (0), (0), (0), (0));
    COL4_CLAMP_TEST(VAR, (pi + 1), (pi -11), (pi + 3), (pi + 4), (1), (0), (1), (1));
    COL4_CLAMP_TEST(VAR, (pi / 64.f), (pi / 32.f), (pi / 128.f), (pi / 256.f),
                         (pi / 64.f), (pi / 32.f), (pi / 128.f), (pi / 256.f));
    COL4_CLAMP_TEST(UNI, (1), (0), (1), (1), (1), (0), (1), (1));
    COL4_CLAMP_TEST(UNI, (.5), (.5), (.5), (.5), (.5), (.5), (.5), (.5));

    return error;
}

//----------------------------------------------------------------------
// Col4x = lerp(Col4x, Col4x, x)
//----------------------------------------------------------------------
#define COL4_LERP_TEST(VUC, VU0, VU1, VU2, V0R, V0G, V0B, V0A, V1R, V1G, V1B, V1A, V2, RR, RG, RB, RA) \
    {                                                                   \
        const VU0 Col4f c0 = Col4f_ctor((VU0 float) (V0R), (VU0 float) (V0G), (VU0 float) (V0B), \
                                        (VU0 float) (V0A));             \
        const VU1 Col4f c1 = Col4f_ctor((VU1 float) (V1R), (VU1 float) (V1G), (VU1 float) (V1B), \
                                        (VU1 float) (V1A));             \
        const VU2 float f = (VU2 float) (V2);                           \
        const VUC Col4f cr = lerp(c0, c1, f);                           \
        if (any(!isEqual(cr.r, (VUC float) (RR))) ||                    \
            any(!isEqual(cr.g, (VUC float) (RG))) ||                    \
            any(!isEqual(cr.b, (VUC float) (RB))) ||                    \
            any(!isEqual(cr.a, (VUC float) (RA)))) {                    \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testLerp()
{
    uniform int error = 0;
    const varying int pi = programIndex + 1;

    COL4_LERP_TEST(VAR, VAR, VAR, VAR,
                        (pi), (2*pi), (3*pi), (4*pi),
                        (pi + 1), (2*pi + 1), (3*pi + 1), (4*pi + 1),
                        (pi / 64.),
                        ((1. - (pi / 64.)) * (pi) + (pi / 64.) * (pi + 1)),
                        ((1. - (pi / 64.)) * (2*pi) + (pi / 64.) * (2*pi + 1)),
                        ((1. - (pi / 64.)) * (3*pi) + (pi / 64.) * (3*pi + 1)),
                        ((1. - (pi / 64.)) * (4*pi) + (pi / 64.) * (4*pi + 1)));
    COL4_LERP_TEST(VAR, VAR, VAR, UNI,
                        (pi), (2*pi), (3*pi), (4*pi),
                        (pi + 1), (2*pi + 1), (3*pi + 1), (4*pi + 1),
                        (1. / 64.),
                        ((1. - (1. / 64.)) * (pi) + (1. / 64.) * (pi + 1)),
                        ((1. - (1. / 64.)) * (2*pi) + (1. / 64.) * (2*pi + 1)),
                        ((1. - (1. / 64.)) * (3*pi) + (1. / 64.) * (3*pi + 1)),
                        ((1. - (1. / 64.)) * (4*pi) + (1. / 64.) * (4*pi + 1)));
    COL4_LERP_TEST(VAR, VAR, UNI, VAR,
                        (pi), (2*pi), (3*pi), (4*pi),
                        (1), (1), (1), (1),
                        (pi / 64.),
                        ((1. - (pi / 64.)) * (pi) + (pi / 64.) * (1)),
                        ((1. - (pi / 64.)) * (2*pi) + (pi / 64.) * (1)),
                        ((1. - (pi / 64.)) * (3*pi) + (pi / 64.) * (1)),
                        ((1. - (pi / 64.)) * (4*pi) + (pi / 64.) * (1)));
    COL4_LERP_TEST(VAR, VAR, UNI, UNI,
                        (pi), (2*pi), (3*pi), (4*pi),
                        (1), (1), (1), (1),
                        (1. / 64.),
                        ((1. - (1. / 64.)) * pi + (1. / 64.) * (1)),
                        ((1. - (1. / 64.)) * (2*pi) + (1. / 64.) * (1)),
                        ((1. - (1. / 64.)) * (3*pi) + (1. / 64.) * (1)),
                        ((1. - (1. / 64.)) * (4*pi) + (1. / 64.) * (1)));
    COL4_LERP_TEST(VAR, UNI, VAR, VAR,
                        (1), (2), (3), (4),
                        (pi + 1), (2*pi + 1), (3*pi + 1), (4*pi + 1),
                        (pi / 64.),
                        ((1. - (pi / 64.)) * (1) + (pi / 64.) * (pi + 1)),
                        ((1. - (pi / 64.)) * (2) + (pi / 64.) * (2*pi + 1)),
                        ((1. - (pi / 64.)) * (3) + (pi / 64.) * (3*pi + 1)),
                        ((1. - (pi / 64.)) * (4) + (pi / 64.) * (4*pi + 1)));
    COL4_LERP_TEST(VAR, UNI, VAR, UNI,
                        (1), (2), (3), (4),
                        (pi + 1), (2*pi + 1), (3*pi + 1), (4*pi + 1),
                        (1. / 64.),
                        ((1. - (1. / 64.)) * (1) + (1. / 64.) * (pi + 1)),
                        ((1. - (1. / 64.)) * (2) + (1. / 64.) * (2*pi + 1)),
                        ((1. - (1. / 64.)) * (3) + (1. / 64.) * (3*pi + 1)),
                        ((1. - (1. / 64.)) * (4) + (1. / 64.) * (4*pi + 1)));
    COL4_LERP_TEST(VAR, UNI, UNI, VAR, (1), (2), (3), (4),
                        (1), (1), (1), (1),
                        (pi / 64.),
                        ((1. - (pi / 64.)) * (1) + (pi / 64.) * (1)),
                        ((1. - (pi / 64.)) * (2) + (pi / 64.) * (1)),
                        ((1. - (pi / 64.)) * (3) + (pi / 64.) * (1)),
                        ((1. - (pi / 64.)) * (4) + (pi / 64.) * (1)));
    COL4_LERP_TEST(UNI, UNI, UNI, UNI,
                        (1), (2), (3), (4),
                        (1), (1), (1), (1),
                        (1. / 64.),
                        ((1. - (1. / 64.)) * (1) + (1. / 64.) * (1)),
                        ((1. - (1. / 64.)) * (2) + (1. / 64.) * (1)),
                        ((1. - (1. / 64.)) * (3) + (1. / 64.) * (1)),
                        ((1. - (1. / 64.)) * (4) + (1. / 64.) * (1)));

    return error;
}

//----------------------------------------------------------------------
// Col4x OP Col4x (+, -, *)
//----------------------------------------------------------------------
#define COL4_OP_TEST(VUC, VU0, VU1, V0R, V0G, V0B, V0A, V1R, V1G, V1B, V1A, OP) \
    {                                                                   \
        const VU0 Col4f c0 = Col4f_ctor((VU0 float) (V0R), (VU0 float) (V0G), (VU0 float) (V0B), \
                                        (VU0 float) (V0A));             \
        const VU1 Col4f c1 = Col4f_ctor((VU1 float) (V1R), (VU1 float) (V1G), (VU1 float) (V1B), \
                                        (VU1 float) (V1A));             \
        const VUC Col4f c = c1 OP c0;                                   \
        if (any(c.r != (V1R OP V0R)) ||                                 \
            any(c.g != (V1G OP V0G)) ||                                 \
            any(c.b != (V1B OP V0B)) ||                                 \
            any(c.a != (V1A OP V0A))) {                                 \
            ++error;                                                    \
        }                                                               \
    }


//----------------------------------------------------------------------
// Col4x - Col4x
//----------------------------------------------------------------------
#define COL4_MINUS_TEST(VUC, VU0, VU1, V0R, V0G, V0B, V0A, V1R, V1G, V1B, V1A) \
    COL4_OP_TEST(VUC, VU0, VU1, V0R, V0G, V0B, V0A, V1R, V1G, V1B, V1A, -)

inline uniform int
testMinus()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    // Col4x = Col4x - Col4x
    // Col4x = Col4x - Col4x
    COL4_MINUS_TEST(VAR, VAR, VAR, (pi), (pi + 1), (pi + 2), (pi + 3), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    COL4_MINUS_TEST(VAR, VAR, UNI, (pi), (pi + 1), (pi + 2), (pi + 3), (1), (2), (3), (4));
    COL4_MINUS_TEST(VAR, UNI, VAR, (0), (1), (2), (3), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    COL4_MINUS_TEST(UNI, UNI, UNI, (0), (1), (2), (3), (1), (2), (3), (4));

    return error;
}

//----------------------------------------------------------------------
// Col4 * Col4
//----------------------------------------------------------------------
#define COL4_MULT_TEST(VUC, VU0, VU1, V0R, V0G, V0B, V0A, V1R, V1G, V1B, V1A) \
    COL4_OP_TEST(VUC, VU0, VU1, V0R, V0G, V0B, V0A,  V1R, V1G, V1B, V1A, *)

inline uniform int
testMult()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    // Col4x = Col4x * Col4x
    COL4_MULT_TEST(VAR, VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi - 1), (pi - 2), (pi - 3), (pi - 4));
    COL4_MULT_TEST(VAR, VAR, UNI, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (-1), (-2), (-3), (-4));
    COL4_MULT_TEST(VAR, UNI, VAR, (1), (2), (3), (4), (pi - 1), (pi - 2), (pi - 3), (pi - 4));
    COL4_MULT_TEST(UNI, UNI, UNI, (1), (2), (3), (4), (-1), (-2), (-3), (-4));

    return error;
}

//----------------------------------------------------------------------
// Col4 + Col4
//----------------------------------------------------------------------
#define COL4_PLUS_TEST(VUC, VU0, VU1, V0R, V0G, V0B, V0A, V1R, V1G, V1B, V1A) \
    COL4_OP_TEST(VUC, VU0, VU1, V0R, V0G, V0B, V0A, V1R, V1G, V1B, V1A, +)

inline uniform int
testPlus()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    COL4_PLUS_TEST(VAR, VAR, VAR, (pi), (pi + 1), (pi + 2), (pi + 3), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    COL4_PLUS_TEST(VAR, VAR, UNI, (pi), (pi + 1), (pi + 2), (pi + 3), (1), (2), (3), (4));
    COL4_PLUS_TEST(VAR, UNI, VAR, (0), (1), (2), (3), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    COL4_PLUS_TEST(UNI, UNI, UNI, (0), (1), (2), (3), (1), (2), (3), (4));

    return error;
}

//----------------------------------------------------------------------
// Col4x * x
//----------------------------------------------------------------------
#define COL4_S_POST_MULT_TEST(VUC, VU0, VU1, V0R, V0G, V0B, V0A, V1)     \
    {                                                                   \
        const VU0 Col4f c0 = Col4f_ctor((VU0 float) (V0R), (VU0 float) (V0G), (VU0 float) (V0B), \
                                        (VU0 float) (V0A));             \
        const VU1 float f0 = (VU1 float) (V1);                          \
        const VUC Col4f c = c0 * f0;                                    \
        if (any(c.r != c0.r * f0) ||                                    \
            any(c.g != c0.g * f0) ||                                    \
            any(c.b != c0.b * f0) ||                                    \
            any(c.a != c0.a * f0)) {                                    \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testScalarPostMult()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    COL4_S_POST_MULT_TEST(VAR, VAR, VAR, (pi), (pi + 1), (pi + 2), (pi + 3), (pi + 1));
    COL4_S_POST_MULT_TEST(VAR, VAR, UNI, (pi), (pi + 1), (pi + 2), (pi + 3), (1));
    COL4_S_POST_MULT_TEST(VAR, UNI, VAR, (0), (1), (2), (3), (pi + 1));
    COL4_S_POST_MULT_TEST(VAR, UNI, UNI, (0), (1), (2), (3), (1));

    return error;
}

//----------------------------------------------------------------------
// x * Col4x
//----------------------------------------------------------------------
#define COL4_S_PRE_MULT_TEST(VUC, VU0, VU1, V0, V1R, V1G, V1B, V1A)     \
    {                                                                   \
        const VU0 float f0 = (VU0 float) (V0);                          \
        const VU1 Col4f c0 = Col4f_ctor((VU1 float) (V1R), (VU1 float) (V1G), (VU1 float) (V1B), \
                                        (VU1 float) (V1A));             \
        const VUC Col4f c = f0 * c0;                                    \
        if (any(c.r != f0 * c0.r) ||                                    \
            any(c.g != f0 * c0.g) ||                                    \
            any(c.b != f0 * c0.b) ||                                    \
            any(c.a != f0 * c0.a)) {                                    \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testScalarPreMult()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    COL4_S_PRE_MULT_TEST(VAR, VAR, VAR, (pi + 1), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    COL4_S_PRE_MULT_TEST(VAR, UNI, VAR, (1), (pi + 1), (pi + 2), (pi + 3), (pi + 4));
    COL4_S_PRE_MULT_TEST(VAR, VAR, UNI, (pi + 1), (1), (2), (3), (4));
    COL4_S_PRE_MULT_TEST(UNI, UNI, UNI, (1), (1), (2), (3), (4));

    return error;
}


//----------------------------------------------------------------------
// bool = isEqual(Col4x, Col4x)
//----------------------------------------------------------------------
#define COL4_IS_EQUAL_TEST(VUP0, VUP1, P0R, P0G, P0B, P0A, P1R, P1G, P1B, P1A, R0) \
    {                                                                   \
        const VUP0 Col4f v0 = Col4f_ctor((VUP0 float) (P0R), (VUP0 float) (P0G), (VUP0 float) (P0B), (VUP0 float) (P0A)); \
        const VUP1 Col4f v1 = Col4f_ctor((VUP1 float) (P1R), (VUP1 float) (P1G), (VUP1 float) (P1B), (VUP1 float) (P1A)); \
        if (any(isEqual(v0, v1) != R0)) {                               \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testIsEqual()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    COL4_IS_EQUAL_TEST(VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4), true);
    COL4_IS_EQUAL_TEST(VAR, UNI, (1), (2), (3), (4), (1), (2), (3), (4), true);
    COL4_IS_EQUAL_TEST(UNI, VAR, (1), (2), (3), (4), (1), (2), (3), (4), true);
    COL4_IS_EQUAL_TEST(UNI, UNI, (1), (2), (3), (4), (1), (2), (3), (4), true);

    COL4_IS_EQUAL_TEST(VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 4), (pi + 3), (pi + 2), (pi + 1), false);
    COL4_IS_EQUAL_TEST(VAR, UNI, (pi + 4), (pi + 5), (pi + 6), (pi + 7), (1), (2), (3), (4), false);
    COL4_IS_EQUAL_TEST(UNI, VAR, (1), (2), (3), (4), (pi + 5), (pi + 6), (pi + 7), (pi + 8), false);
    COL4_IS_EQUAL_TEST(UNI, UNI, (1), (2), (3), (4), (4), (3), (2), (1), false);

    return error;
}

//----------------------------------------------------------------------
// bool = isEqualFixedEps(Col4x, Col4x)
//----------------------------------------------------------------------
#define COL4_IS_EQUAL_FIXED_EPS_TEST(VUP0, VUP1, P0R, P0G, P0B, P0A, P1R, P1G, P1B, P1A, R0) \
    {                                                                   \
        const VUP0 Col4f v0 = Col4f_ctor((VUP0 float) (P0R), (VUP0 float) (P0G), (VUP0 float) (P0B), (VUP0 float) (P0A)); \
        const VUP1 Col4f v1 = Col4f_ctor((VUP1 float) (P1R), (VUP1 float) (P1G), (VUP1 float) (P1B), (VUP1 float) (P1A)); \
        if (any(isEqualFixedEps(v0, v1) != R0)) {                               \
            ++error;                                                    \
        }                                                               \
    }

inline uniform int
testIsEqualFixedEps()
{
    uniform int error = 0;
    const varying int pi = programIndex;

    COL4_IS_EQUAL_FIXED_EPS_TEST(VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 1), (pi + 2), (pi + 3), (pi + 4), true);
    COL4_IS_EQUAL_FIXED_EPS_TEST(VAR, UNI, (1), (2), (3), (4), (1), (2), (3), (4), true);
    COL4_IS_EQUAL_FIXED_EPS_TEST(UNI, VAR, (1), (2), (3), (4), (1), (2), (3), (4), true);
    COL4_IS_EQUAL_FIXED_EPS_TEST(UNI, UNI, (1), (2), (3), (4), (1), (2), (3), (4), true);

    COL4_IS_EQUAL_FIXED_EPS_TEST(VAR, VAR, (pi + 1), (pi + 2), (pi + 3), (pi + 4), (pi + 4), (pi + 3), (pi + 2), (pi + 1), false);
    COL4_IS_EQUAL_FIXED_EPS_TEST(VAR, UNI, (pi + 4), (pi + 5), (pi + 6), (pi + 7), (1), (2), (3), (4), false);
    COL4_IS_EQUAL_FIXED_EPS_TEST(UNI, VAR, (1), (2), (3), (4), (pi + 5), (pi + 6), (pi + 7), (pi + 8), false);
    COL4_IS_EQUAL_FIXED_EPS_TEST(UNI, UNI, (1), (2), (3), (4), (4), (3), (2), (1), false);

    return error;
}

